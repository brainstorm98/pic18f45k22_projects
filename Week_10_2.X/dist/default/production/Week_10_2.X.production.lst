

Microchip MPLAB XC8 Assembler V2.41 build 20230208172133 
                                                                                               Tue May 23 11:59:38 2023

Microchip MPLAB XC8 C Compiler v2.41 (Free license) build 20230208172133 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=3
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=3
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=3
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=3
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=3
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    30                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    31                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    32                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    33   000000                     
    34                           ; Generated 06/04/2022 GMT
    35                           ; 
    36                           ; Copyright Â© 2022, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution. Publication is not required when
    50                           ;        this file is used in an embedded application.
    51                           ; 
    52                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    53                           ;        software without specific prior written permission.
    54                           ; 
    55                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    56                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    57                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    58                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    59                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    60                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    61                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    62                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    63                           ; 
    64                           ; 
    65                           ; Code-generator required, PIC18F45K22 Definitions
    66                           ; 
    67                           ; SFR Addresses
    68   000000                     
    69                           	psect	idataBANK0
    70   000E8C                     __pidataBANK0:
    71                           	callstack 0
    72                           
    73                           ;initializer for _line
    74   000E8C  20                 	db	32
    75   000E8D  20                 	db	32
    76   000E8E  20                 	db	32
    77   000E8F  20                 	db	32
    78   000E90  20                 	db	32
    79   000E91  20                 	db	32
    80   000E92  20                 	db	32
    81   000E93  20                 	db	32
    82   000E94  20                 	db	32
    83   000E95  20                 	db	32
    84   000E96  20                 	db	32
    85   000E97  20                 	db	32
    86   000E98  20                 	db	32
    87   000E99  20                 	db	32
    88   000E9A  20                 	db	32
    89   000E9B  20                 	db	32
    90   000E9C  20                 	db	32
    91   000000                     _PORTBbits	set	3969
    92   000000                     _ANSELB	set	3897
    93   000000                     _PORTB	set	3969
    94   000000                     _TRISB	set	3987
    95                           
    96                           	psect	smallconst
    97   000600                     __psmallconst:
    98                           	callstack 0
    99   000600  00                 	db	0
   100   000601                     STR_1:
   101   000601  20                 	db	32
   102   000602  20                 	db	32
   103   000603  48                 	db	72	;'H'
   104   000604  45                 	db	69	;'E'
   105   000605  4C                 	db	76	;'L'
   106   000606  4C                 	db	76	;'L'
   107   000607  4F                 	db	79	;'O'
   108   000608  20                 	db	32
   109   000609  57                 	db	87	;'W'
   110   00060A  4F                 	db	79	;'O'
   111   00060B  52                 	db	82	;'R'
   112   00060C  4C                 	db	76	;'L'
   113   00060D  44                 	db	68	;'D'
   114   00060E  21                 	db	33
   115   00060F  20                 	db	32
   116   000610  20                 	db	32
   117   000611  00                 	db	0
   118   000612                     STR_2:
   119   000612  25                 	db	37
   120   000613  64                 	db	100	;'d'
   121   000614  00                 	db	0
   122   000615  00                 	db	0	; dummy byte at the end
   123   000000                     
   124                           ; #config settings
   125                           
   126                           	psect	cinit
   127   000DB6                     __pcinit:
   128                           	callstack 0
   129   000DB6                     start_initialization:
   130                           	callstack 0
   131   000DB6                     __initialization:
   132                           	callstack 0
   133                           
   134                           ; Initialize objects allocated to BANK0 (17 bytes)
   135                           ; load TBLPTR registers with __pidataBANK0
   136   000DB6  0E8C               	movlw	low __pidataBANK0
   137   000DB8  6EF6               	movwf	tblptrl,c
   138   000DBA  0E0E               	movlw	high __pidataBANK0
   139   000DBC  6EF7               	movwf	tblptrh,c
   140   000DBE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   141   000DC0  6EF8               	movwf	tblptru,c
   142   000DC2  EE00  F080         	lfsr	0,__pdataBANK0
   143   000DC6  EE10 F011          	lfsr	1,17
   144   000DCA                     copy_data0:
   145   000DCA  0009               	tblrd		*+
   146   000DCC  CFF5 FFEE          	movff	tablat,postinc0
   147   000DD0  50E5               	movf	postdec1,w,c
   148   000DD2  50E1               	movf	fsr1l,w,c
   149   000DD4  E1FA               	bnz	copy_data0
   150                           
   151                           ; Clear objects allocated to BANK0 (32 bytes)
   152   000DD6  EE00  F060         	lfsr	0,__pbssBANK0
   153   000DDA  0E20               	movlw	32
   154   000DDC                     clear_0:
   155   000DDC  6AEE               	clrf	postinc0,c
   156   000DDE  06E8               	decf	wreg,f,c
   157   000DE0  E1FD               	bnz	clear_0
   158                           
   159                           ; Clear objects allocated to COMRAM (7 bytes)
   160   000DE2  EE00  F054         	lfsr	0,__pbssCOMRAM
   161   000DE6  0E07               	movlw	7
   162   000DE8                     clear_1:
   163   000DE8  6AEE               	clrf	postinc0,c
   164   000DEA  06E8               	decf	wreg,f,c
   165   000DEC  E1FD               	bnz	clear_1
   166   000DEE                     end_of_initialization:
   167                           	callstack 0
   168   000DEE                     __end_of__initialization:
   169                           	callstack 0
   170   000DEE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   171   000DF0  6EF8               	movwf	tblptru,c
   172   000DF2  0100               	movlb	0
   173   000DF4  EF85  F005         	goto	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMRAM
   176   000054                     __pbssCOMRAM:
   177                           	callstack 0
   178   000054                     _width:
   179                           	callstack 0
   180   000054                     	ds	2
   181   000056                     _prec:
   182                           	callstack 0
   183   000056                     	ds	2
   184   000058                     _cnt:
   185                           	callstack 0
   186   000058                     	ds	2
   187   00005A                     _flags:
   188                           	callstack 0
   189   00005A                     	ds	1
   190                           
   191                           	psect	bssBANK0
   192   000060                     __pbssBANK0:
   193                           	callstack 0
   194   000060                     _dbuf:
   195                           	callstack 0
   196   000060                     	ds	32
   197                           
   198                           	psect	dataBANK0
   199   000080                     __pdataBANK0:
   200                           	callstack 0
   201   000080                     _line:
   202                           	callstack 0
   203   000080                     	ds	17
   204                           
   205                           	psect	cstackCOMRAM
   206   000001                     __pcstackCOMRAM:
   207                           	callstack 0
   208   000001                     ??_lcd_write:
   209   000001                     ?___awdiv:
   210                           	callstack 0
   211   000001                     ?___awmod:
   212                           	callstack 0
   213   000001                     ___awdiv@dividend:
   214                           	callstack 0
   215   000001                     ___awmod@dividend:
   216                           	callstack 0
   217   000001                     fputc@c:
   218                           	callstack 0
   219                           
   220                           ; 2 bytes @ 0x0
   221   000001                     	ds	1
   222   000002                     lcd_write@c:
   223                           	callstack 0
   224                           
   225                           ; 1 bytes @ 0x1
   226   000002                     	ds	1
   227   000003                     ??_lcd_clear:
   228   000003                     lcd_goto@pos:
   229                           	callstack 0
   230   000003                     lcd_puts@s:
   231                           	callstack 0
   232   000003                     ___awdiv@divisor:
   233                           	callstack 0
   234   000003                     ___awmod@divisor:
   235                           	callstack 0
   236   000003                     fputc@fp:
   237                           	callstack 0
   238                           
   239                           ; 2 bytes @ 0x2
   240   000003                     	ds	1
   241   000004                     ??_lcd_init:
   242                           
   243                           ; 1 bytes @ 0x3
   244   000004                     	ds	1
   245   000005                     ??_fputc:
   246   000005                     ___awdiv@counter:
   247                           	callstack 0
   248   000005                     ___awmod@counter:
   249                           	callstack 0
   250                           
   251                           ; 1 bytes @ 0x4
   252   000005                     	ds	1
   253   000006                     ___awdiv@sign:
   254                           	callstack 0
   255   000006                     ___awmod@sign:
   256                           	callstack 0
   257                           
   258                           ; 1 bytes @ 0x5
   259   000006                     	ds	1
   260   000007                     ?_abs:
   261                           	callstack 0
   262   000007                     ___awdiv@quotient:
   263                           	callstack 0
   264   000007                     abs@a:
   265                           	callstack 0
   266                           
   267                           ; 2 bytes @ 0x6
   268   000007                     	ds	2
   269   000009                     ??_abs:
   270                           
   271                           ; 1 bytes @ 0x8
   272   000009                     	ds	1
   273   00000A                     fputs@s:
   274                           	callstack 0
   275                           
   276                           ; 2 bytes @ 0x9
   277   00000A                     	ds	2
   278   00000C                     fputs@fp:
   279                           	callstack 0
   280                           
   281                           ; 2 bytes @ 0xB
   282   00000C                     	ds	2
   283   00000E                     fputs@c:
   284                           	callstack 0
   285                           
   286                           ; 1 bytes @ 0xD
   287   00000E                     	ds	1
   288   00000F                     fputs@i:
   289                           	callstack 0
   290                           
   291                           ; 2 bytes @ 0xE
   292   00000F                     	ds	2
   293   000011                     pad@fp:
   294                           	callstack 0
   295                           
   296                           ; 2 bytes @ 0x10
   297   000011                     	ds	2
   298   000013                     pad@buf:
   299                           	callstack 0
   300                           
   301                           ; 2 bytes @ 0x12
   302   000013                     	ds	2
   303   000015                     pad@p:
   304                           	callstack 0
   305                           
   306                           ; 2 bytes @ 0x14
   307   000015                     	ds	2
   308   000017                     ??_pad:
   309                           
   310                           ; 1 bytes @ 0x16
   311   000017                     	ds	1
   312   000018                     pad@i:
   313                           	callstack 0
   314                           
   315                           ; 2 bytes @ 0x17
   316   000018                     	ds	2
   317   00001A                     pad@w:
   318                           	callstack 0
   319                           
   320                           ; 2 bytes @ 0x19
   321   00001A                     	ds	2
   322   00001C                     dtoa@fp:
   323                           	callstack 0
   324                           
   325                           ; 2 bytes @ 0x1B
   326   00001C                     	ds	2
   327   00001E                     dtoa@d:
   328                           	callstack 0
   329                           
   330                           ; 2 bytes @ 0x1D
   331   00001E                     	ds	2
   332   000020                     _dtoa$725:
   333                           	callstack 0
   334                           
   335                           ; 2 bytes @ 0x1F
   336   000020                     	ds	2
   337   000022                     dtoa@p:
   338                           	callstack 0
   339                           
   340                           ; 2 bytes @ 0x21
   341   000022                     	ds	2
   342   000024                     dtoa@w:
   343                           	callstack 0
   344                           
   345                           ; 2 bytes @ 0x23
   346   000024                     	ds	2
   347   000026                     dtoa@i:
   348                           	callstack 0
   349                           
   350                           ; 2 bytes @ 0x25
   351   000026                     	ds	2
   352   000028                     dtoa@s:
   353                           	callstack 0
   354                           
   355                           ; 1 bytes @ 0x27
   356   000028                     	ds	1
   357   000029                     vfpfcnvrt@fp:
   358                           	callstack 0
   359                           
   360                           ; 2 bytes @ 0x28
   361   000029                     	ds	2
   362   00002B                     vfpfcnvrt@fmt:
   363                           	callstack 0
   364                           
   365                           ; 2 bytes @ 0x2A
   366   00002B                     	ds	2
   367   00002D                     vfpfcnvrt@ap:
   368                           	callstack 0
   369                           
   370                           ; 2 bytes @ 0x2C
   371   00002D                     	ds	2
   372   00002F                     ??_vfpfcnvrt:
   373                           
   374                           ; 1 bytes @ 0x2E
   375   00002F                     	ds	2
   376   000031                     vfpfcnvrt@convarg:
   377                           	callstack 0
   378                           
   379                           ; 4 bytes @ 0x30
   380   000031                     	ds	4
   381   000035                     vfpfcnvrt@cp:
   382                           	callstack 0
   383                           
   384                           ; 2 bytes @ 0x34
   385   000035                     	ds	2
   386   000037                     ?_vfprintf:
   387                           	callstack 0
   388   000037                     vfprintf@fp:
   389                           	callstack 0
   390                           
   391                           ; 2 bytes @ 0x36
   392   000037                     	ds	2
   393   000039                     vfprintf@fmt:
   394                           	callstack 0
   395                           
   396                           ; 2 bytes @ 0x38
   397   000039                     	ds	2
   398   00003B                     vfprintf@ap:
   399                           	callstack 0
   400                           
   401                           ; 2 bytes @ 0x3A
   402   00003B                     	ds	2
   403   00003D                     vfprintf@cfmt:
   404                           	callstack 0
   405                           
   406                           ; 2 bytes @ 0x3C
   407   00003D                     	ds	2
   408   00003F                     ?_sprintf:
   409                           	callstack 0
   410   00003F                     sprintf@s:
   411                           	callstack 0
   412                           
   413                           ; 2 bytes @ 0x3E
   414   00003F                     	ds	2
   415   000041                     sprintf@fmt:
   416                           	callstack 0
   417                           
   418                           ; 2 bytes @ 0x40
   419   000041                     	ds	4
   420   000045                     sprintf@ap:
   421                           	callstack 0
   422                           
   423                           ; 2 bytes @ 0x44
   424   000045                     	ds	2
   425   000047                     sprintf@f:
   426                           	callstack 0
   427                           
   428                           ; 12 bytes @ 0x46
   429   000047                     	ds	12
   430   000053                     ??_main:
   431                           
   432                           ; 1 bytes @ 0x52
   433   000053                     	ds	1
   434                           
   435 ;;
   436 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   437 ;;
   438 ;; *************** function _main *****************
   439 ;; Defined at:
   440 ;;		line 22 in file "newmain.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;		None
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   454 ;;      Params:         0       0       0       0       0       0       0
   455 ;;      Locals:         0       0       0       0       0       0       0
   456 ;;      Temps:          1       0       0       0       0       0       0
   457 ;;      Totals:         1       0       0       0       0       0       0
   458 ;;Total ram usage:        1 bytes
   459 ;; Hardware stack levels required when called: 8
   460 ;; This function calls:
   461 ;;		_lcd_clear
   462 ;;		_lcd_goto
   463 ;;		_lcd_init
   464 ;;		_lcd_puts
   465 ;;		_sprintf
   466 ;; This function is called by:
   467 ;;		Startup code after reset
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text0
   472   000B0A                     __ptext0:
   473                           	callstack 0
   474   000B0A                     _main:
   475                           	callstack 23
   476   000B0A                     
   477                           ;newmain.c: 23:     return;
   478   000B0A  0E00               	movlw	0
   479   000B0C  010F               	movlb	15	; () banked
   480   000B0E  6F39               	movwf	57,b	;volatile
   481                           
   482                           ;newmain.c: 24: }
   483   000B10  0EC0               	movlw	192
   484   000B12  6E93               	movwf	147,c	;volatile
   485   000B14                     
   486                           ; BSR set to: 15
   487   000B14  EC07  F006         	call	_lcd_init	;wreg free
   488   000B18  EC39  F007         	call	_lcd_clear	;wreg free
   489   000B1C  0E00               	movlw	0
   490   000B1E  EC4F  F007         	call	_lcd_goto
   491   000B22  0E01               	movlw	low STR_1
   492   000B24  6E03               	movwf	lcd_puts@s^0,c
   493   000B26  0E06               	movlw	high STR_1
   494   000B28  6E04               	movwf	(lcd_puts@s+1)^0,c
   495   000B2A  EC3C  F006         	call	_lcd_puts	;wreg free
   496   000B2E                     l1457:
   497   000B2E  0E34               	movlw	52
   498   000B30  6E53               	movwf	??_main^0,c
   499   000B32  0EF2               	movlw	242
   500   000B34                     u777:
   501   000B34  2EE8               	decfsz	wreg,f,c
   502   000B36  D7FE               	bra	u777
   503   000B38  2E53               	decfsz	??_main^0,f,c
   504   000B3A  D7FC               	bra	u777
   505   000B3C  0E80               	movlw	low _line
   506   000B3E  6E3F               	movwf	sprintf@s^0,c
   507   000B40  0E00               	movlw	high _line
   508   000B42  6E40               	movwf	(sprintf@s+1)^0,c
   509   000B44  0E12               	movlw	low STR_2
   510   000B46  6E41               	movwf	sprintf@fmt^0,c
   511   000B48  0E06               	movlw	high STR_2
   512   000B4A  6E42               	movwf	(sprintf@fmt+1)^0,c
   513   000B4C  C058  F043         	movff	_cnt,?_sprintf+4
   514   000B50  C059  F044         	movff	_cnt+1,?_sprintf+5
   515   000B54  EC93  F006         	call	_sprintf	;wreg free
   516   000B58  0E40               	movlw	64
   517   000B5A  EC4F  F007         	call	_lcd_goto
   518   000B5E  0E80               	movlw	low _line
   519   000B60  6E03               	movwf	lcd_puts@s^0,c
   520   000B62  0E00               	movlw	high _line
   521   000B64  6E04               	movwf	(lcd_puts@s+1)^0,c
   522   000B66  EC3C  F006         	call	_lcd_puts	;wreg free
   523   000B6A  4A58               	infsnz	_cnt^0,f,c
   524   000B6C  2A59               	incf	(_cnt+1)^0,f,c
   525   000B6E  0EE8               	movlw	232
   526   000B70  5C58               	subwf	_cnt^0,w,c
   527   000B72  0E03               	movlw	3
   528   000B74  5859               	subwfb	(_cnt+1)^0,w,c
   529   000B76  A0D8               	btfss	status,0,c
   530   000B78  EFC0  F005         	goto	u761
   531   000B7C  EFC2  F005         	goto	u760
   532   000B80                     u761:
   533   000B80  EF97  F005         	goto	l1457
   534   000B84                     u760:
   535   000B84  0E00               	movlw	0
   536   000B86  6E59               	movwf	(_cnt+1)^0,c
   537   000B88  0E00               	movlw	0
   538   000B8A  6E58               	movwf	_cnt^0,c
   539   000B8C  EF97  F005         	goto	l1457
   540   000B90  EF00  F000         	goto	start
   541   000B94                     __end_of_main:
   542                           	callstack 0
   543                           
   544 ;; *************** function _sprintf *****************
   545 ;; Defined at:
   546 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_sprintf.c"
   547 ;; Parameters:    Size  Location     Type
   548 ;;  s               2   62[COMRAM] PTR unsigned char 
   549 ;;		 -> line(17), 
   550 ;;  fmt             2   64[COMRAM] PTR const unsigned char 
   551 ;;		 -> STR_2(3), 
   552 ;; Auto vars:     Size  Location     Type
   553 ;;  f              12   70[COMRAM] struct _IO_FILE
   554 ;;  ap              2   68[COMRAM] PTR void [1]
   555 ;;		 -> ?_sprintf(2), 
   556 ;;  ret             2    0        int 
   557 ;; Return value:  Size  Location     Type
   558 ;;                  2   62[COMRAM] int 
   559 ;; Registers used:
   560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 0/0
   563 ;;		On exit  : 0/0
   564 ;;		Unchanged: 0/0
   565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   566 ;;      Params:         6       0       0       0       0       0       0
   567 ;;      Locals:        14       0       0       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0       0       0
   569 ;;      Totals:        20       0       0       0       0       0       0
   570 ;;Total ram usage:       20 bytes
   571 ;; Hardware stack levels used: 1
   572 ;; Hardware stack levels required when called: 7
   573 ;; This function calls:
   574 ;;		_vfprintf
   575 ;; This function is called by:
   576 ;;		_main
   577 ;; This function uses a non-reentrant model
   578 ;;
   579                           
   580                           	psect	text1
   581   000D26                     __ptext1:
   582                           	callstack 0
   583   000D26                     _sprintf:
   584                           	callstack 23
   585   000D26  0E43               	movlw	low (?_sprintf+4)
   586   000D28  6E45               	movwf	sprintf@ap^0,c
   587   000D2A  0E00               	movlw	high (?_sprintf+4)
   588   000D2C  6E46               	movwf	(sprintf@ap+1)^0,c
   589   000D2E  C03F  F047         	movff	sprintf@s,sprintf@f
   590   000D32  C040  F048         	movff	sprintf@s+1,sprintf@f+1
   591   000D36  0E00               	movlw	0
   592   000D38  6E4B               	movwf	(sprintf@f+4)^0,c
   593   000D3A  0E00               	movlw	0
   594   000D3C  6E4A               	movwf	(sprintf@f+3)^0,c
   595   000D3E  0E00               	movlw	0
   596   000D40  6E52               	movwf	(sprintf@f+11)^0,c
   597   000D42  0E00               	movlw	0
   598   000D44  6E51               	movwf	(sprintf@f+10)^0,c
   599   000D46  0E47               	movlw	low sprintf@f
   600   000D48  6E37               	movwf	vfprintf@fp^0,c
   601   000D4A  0E00               	movlw	high sprintf@f
   602   000D4C  6E38               	movwf	(vfprintf@fp+1)^0,c
   603   000D4E  C041  F039         	movff	sprintf@fmt,vfprintf@fmt
   604   000D52  C042  F03A         	movff	sprintf@fmt+1,vfprintf@fmt+1
   605   000D56  0E45               	movlw	low sprintf@ap
   606   000D58  6E3B               	movwf	vfprintf@ap^0,c
   607   000D5A  0E00               	movlw	high sprintf@ap
   608   000D5C  6E3C               	movwf	(vfprintf@ap+1)^0,c
   609   000D5E  EC6C  F006         	call	_vfprintf	;wreg free
   610   000D62  504A               	movf	(sprintf@f+3)^0,w,c
   611   000D64  243F               	addwf	sprintf@s^0,w,c
   612   000D66  6ED9               	movwf	fsr2l,c
   613   000D68  504B               	movf	(sprintf@f+4)^0,w,c
   614   000D6A  2040               	addwfc	(sprintf@s+1)^0,w,c
   615   000D6C  6EDA               	movwf	fsr2h,c
   616   000D6E  6ADF               	clrf	indf2,c
   617   000D70  0012               	return		;funcret
   618   000D72                     __end_of_sprintf:
   619                           	callstack 0
   620                           
   621 ;; *************** function _vfprintf *****************
   622 ;; Defined at:
   623 ;;		line 1546 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
   624 ;; Parameters:    Size  Location     Type
   625 ;;  fp              2   54[COMRAM] PTR struct _IO_FILE
   626 ;;		 -> sprintf@f(12), 
   627 ;;  fmt             2   56[COMRAM] PTR const unsigned char 
   628 ;;		 -> STR_2(3), 
   629 ;;  ap              2   58[COMRAM] PTR PTR void 
   630 ;;		 -> sprintf@ap(2), 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  cfmt            2   60[COMRAM] PTR unsigned char 
   633 ;;		 -> STR_2(3), 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  2   54[COMRAM] int 
   636 ;; Registers used:
   637 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   643 ;;      Params:         6       0       0       0       0       0       0
   644 ;;      Locals:         2       0       0       0       0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0
   646 ;;      Totals:         8       0       0       0       0       0       0
   647 ;;Total ram usage:        8 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 6
   650 ;; This function calls:
   651 ;;		_vfpfcnvrt
   652 ;; This function is called by:
   653 ;;		_sprintf
   654 ;; This function uses a non-reentrant model
   655 ;;
   656                           
   657                           	psect	text2
   658   000CD8                     __ptext2:
   659                           	callstack 0
   660   000CD8                     _vfprintf:
   661                           	callstack 23
   662   000CD8                     
   663                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1546: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\source
      +                          s\c99\common\doprnt.c: 1547: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\comm
      +                          on\doprnt.c: 1549:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\
      +                          common\doprnt.c: 1551:     cfmt = (char *)fmt;
   664   000CD8  C039  F03D         	movff	vfprintf@fmt,vfprintf@cfmt
   665   000CDC  C03A  F03E         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
   666                           
   667                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
   668   000CE0  EF80  F006         	goto	l1375
   669   000CE4                     l1373:
   670                           
   671                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1559:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   672   000CE4  C037  F029         	movff	vfprintf@fp,vfpfcnvrt@fp
   673   000CE8  C038  F02A         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
   674   000CEC  0E3D               	movlw	low vfprintf@cfmt
   675   000CEE  6E2B               	movwf	vfpfcnvrt@fmt^0,c
   676   000CF0  0E00               	movlw	high vfprintf@cfmt
   677   000CF2  6E2C               	movwf	(vfpfcnvrt@fmt+1)^0,c
   678   000CF4  C03B  F02D         	movff	vfprintf@ap,vfpfcnvrt@ap
   679   000CF8  C03C  F02E         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
   680   000CFC  ECD5  F003         	call	_vfpfcnvrt	;wreg free
   681   000D00                     l1375:
   682                           
   683                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1555:     while (
      +                          *cfmt) {
   684   000D00  C03D  FFF6         	movff	vfprintf@cfmt,tblptrl
   685   000D04  C03E  FFF7         	movff	vfprintf@cfmt+1,tblptrh
   686   000D08                     	if	0	;tblptru may be non-zero
   687   000D08                     	endif
   688   000D08                     	if	0	;tblptru may be non-zero
   689   000D08                     	endif
   690   000D08  0008               	tblrd		*
   691   000D0A  50F5               	movf	tablat,w,c
   692   000D0C  0900               	iorlw	0
   693   000D0E  A4D8               	btfss	status,2,c
   694   000D10  EF8C  F006         	goto	u721
   695   000D14  EF8E  F006         	goto	u720
   696   000D18                     u721:
   697   000D18  EF72  F006         	goto	l1373
   698   000D1C                     u720:
   699   000D1C                     
   700                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1564:  return 0;
   701   000D1C  0E00               	movlw	0
   702   000D1E  6E38               	movwf	(?_vfprintf+1)^0,c
   703   000D20  0E00               	movlw	0
   704   000D22  6E37               	movwf	?_vfprintf^0,c
   705   000D24  0012               	return		;funcret
   706   000D26                     __end_of_vfprintf:
   707                           	callstack 0
   708                           
   709 ;; *************** function _vfpfcnvrt *****************
   710 ;; Defined at:
   711 ;;		line 1048 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  fp              2   40[COMRAM] PTR struct _IO_FILE
   714 ;;		 -> sprintf@f(12), 
   715 ;;  fmt             2   42[COMRAM] PTR PTR unsigned char 
   716 ;;		 -> vfprintf@cfmt(2), 
   717 ;;  ap              2   44[COMRAM] PTR PTR void 
   718 ;;		 -> sprintf@ap(2), 
   719 ;; Auto vars:     Size  Location     Type
   720 ;;  convarg         4   48[COMRAM] struct .
   721 ;;  cp              2   52[COMRAM] PTR unsigned char 
   722 ;;		 -> STR_2(3), 
   723 ;;  i               2    0        int 
   724 ;;  done            2    0        int 
   725 ;;  c               1    0        unsigned char 
   726 ;; Return value:  Size  Location     Type
   727 ;;                  1    wreg      void 
   728 ;; Registers used:
   729 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   730 ;; Tracked objects:
   731 ;;		On entry : 0/0
   732 ;;		On exit  : 0/0
   733 ;;		Unchanged: 0/0
   734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   735 ;;      Params:         6       0       0       0       0       0       0
   736 ;;      Locals:         6       0       0       0       0       0       0
   737 ;;      Temps:          2       0       0       0       0       0       0
   738 ;;      Totals:        14       0       0       0       0       0       0
   739 ;;Total ram usage:       14 bytes
   740 ;; Hardware stack levels used: 1
   741 ;; Hardware stack levels required when called: 5
   742 ;; This function calls:
   743 ;;		_dtoa
   744 ;;		_fputc
   745 ;; This function is called by:
   746 ;;		_vfprintf
   747 ;; This function uses a non-reentrant model
   748 ;;
   749                           
   750                           	psect	text3
   751   0007AA                     __ptext3:
   752                           	callstack 0
   753   0007AA                     _vfpfcnvrt:
   754                           	callstack 23
   755   0007AA                     
   756                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1048: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1049: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\dopr
      +                          nt.c: 1050:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common
      +                          \doprnt.c: 1051:     int done, i;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1059:  } convarg;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\c
      +                          ommon\doprnt.c: 1062:     if ((*fmt)[0] == '%') {
   757   0007AA  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   758   0007AE  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   759   0007B2  CFDE FFF6          	movff	postinc2,tblptrl
   760   0007B6  CFDD FFF7          	movff	postdec2,tblptrh
   761   0007BA                     	if	0	;tblptru may be non-zero
   762   0007BA                     	endif
   763   0007BA                     	if	0	;tblptru may be non-zero
   764   0007BA                     	endif
   765   0007BA  0008               	tblrd		*
   766   0007BC  50F5               	movf	tablat,w,c
   767   0007BE  0A25               	xorlw	37
   768   0007C0  A4D8               	btfss	status,2,c
   769   0007C2  EFE5  F003         	goto	u691
   770   0007C6  EFE7  F003         	goto	u690
   771   0007CA                     u691:
   772   0007CA  EF51  F004         	goto	l1359
   773   0007CE                     u690:
   774   0007CE                     
   775                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1063:         ++*
      +                          fmt;
   776   0007CE  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   777   0007D2  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   778   0007D6  2ADE               	incf	postinc2,f,c
   779   0007D8  0E00               	movlw	0
   780   0007DA  22DD               	addwfc	postdec2,f,c
   781   0007DC                     
   782                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1065:         fla
      +                          gs = width = 0;
   783   0007DC  0E00               	movlw	0
   784   0007DE  6E55               	movwf	(_width+1)^0,c
   785   0007E0  0E00               	movlw	0
   786   0007E2  6E54               	movwf	_width^0,c
   787   0007E4  C054  F05A         	movff	_width,_flags
   788   0007E8                     
   789                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1066:         pre
      +                          c = -1;
   790   0007E8  6856               	setf	_prec^0,c
   791   0007EA  6857               	setf	(_prec+1)^0,c
   792   0007EC                     
   793                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1143:   cp = *fmt
      +                          ;
   794   0007EC  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   795   0007F0  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   796   0007F4  CFDE F035          	movff	postinc2,vfpfcnvrt@cp
   797   0007F8  CFDD F036          	movff	postdec2,vfpfcnvrt@cp+1
   798   0007FC                     
   799                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1213:   if (*cp =
      +                          = 'd' || *cp == 'i') {
   800   0007FC  C035  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   801   000800  C036  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
   802   000804                     	if	0	;tblptru may be non-zero
   803   000804                     	endif
   804   000804                     	if	0	;tblptru may be non-zero
   805   000804                     	endif
   806   000804  0008               	tblrd		*
   807   000806  50F5               	movf	tablat,w,c
   808   000808  0A64               	xorlw	100
   809   00080A  B4D8               	btfsc	status,2,c
   810   00080C  EF0A  F004         	goto	u701
   811   000810  EF0C  F004         	goto	u700
   812   000814                     u701:
   813   000814  EF1A  F004         	goto	l1349
   814   000818                     u700:
   815   000818  C035  FFF6         	movff	vfpfcnvrt@cp,tblptrl
   816   00081C  C036  FFF7         	movff	vfpfcnvrt@cp+1,tblptrh
   817   000820                     	if	0	;tblptru may be non-zero
   818   000820                     	endif
   819   000820                     	if	0	;tblptru may be non-zero
   820   000820                     	endif
   821   000820  0008               	tblrd		*
   822   000822  50F5               	movf	tablat,w,c
   823   000824  0A69               	xorlw	105
   824   000826  A4D8               	btfss	status,2,c
   825   000828  EF18  F004         	goto	u711
   826   00082C  EF1A  F004         	goto	u710
   827   000830                     u711:
   828   000830  EF48  F004         	goto	l1355
   829   000834                     u710:
   830   000834                     l1349:
   831                           
   832                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1256:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
   833   000834  C02D  FFD9         	movff	vfpfcnvrt@ap,fsr2l
   834   000838  C02E  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
   835   00083C  CFDF F02F          	movff	indf2,??_vfpfcnvrt
   836   000840  0E02               	movlw	2
   837   000842  26DE               	addwf	postinc2,f,c
   838   000844  CFDF F030          	movff	indf2,??_vfpfcnvrt+1
   839   000848  0E00               	movlw	0
   840   00084A  22DD               	addwfc	postdec2,f,c
   841   00084C  C02F  FFD9         	movff	??_vfpfcnvrt,fsr2l
   842   000850  C030  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
   843   000854  CFDE F031          	movff	postinc2,vfpfcnvrt@convarg
   844   000858  CFDD F032          	movff	postdec2,vfpfcnvrt@convarg+1
   845                           
   846                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1258:    *fmt = c
      +                          p+1;
   847   00085C  0E01               	movlw	1
   848   00085E  2435               	addwf	vfpfcnvrt@cp^0,w,c
   849   000860  6E2F               	movwf	??_vfpfcnvrt^0,c
   850   000862  0E00               	movlw	0
   851   000864  2036               	addwfc	(vfpfcnvrt@cp+1)^0,w,c
   852   000866  6E30               	movwf	(??_vfpfcnvrt+1)^0,c
   853   000868  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   854   00086C  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   855   000870  C02F  FFDE         	movff	??_vfpfcnvrt,postinc2
   856   000874  C030  FFDD         	movff	??_vfpfcnvrt+1,postdec2
   857   000878                     
   858                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1259:    return (
      +                          void) dtoa(fp, convarg.sint);;	Return value of _vfpfcnvrt is never used
   859   000878  C029  F01C         	movff	vfpfcnvrt@fp,dtoa@fp
   860   00087C  C02A  F01D         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
   861   000880  C031  F01E         	movff	vfpfcnvrt@convarg,dtoa@d
   862   000884  C032  F01F         	movff	vfpfcnvrt@convarg+1,dtoa@d+1
   863   000888  EC0B  F003         	call	_dtoa	;wreg free
   864   00088C  EF65  F004         	goto	l789
   865   000890                     l1355:
   866                           
   867                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1535:         ++*
      +                          fmt;
   868   000890  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   869   000894  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   870   000898  2ADE               	incf	postinc2,f,c
   871   00089A  0E00               	movlw	0
   872   00089C  22DD               	addwfc	postdec2,f,c
   873   00089E  EF65  F004         	goto	l789
   874   0008A2                     l1359:
   875                           
   876                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 1540:     fputc((
      +                          int)(*fmt)[0], fp);
   877   0008A2  C02B  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
   878   0008A6  C02C  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
   879   0008AA  CFDE FFF6          	movff	postinc2,tblptrl
   880   0008AE  CFDD FFF7          	movff	postdec2,tblptrh
   881   0008B2                     	if	0	;tblptru may be non-zero
   882   0008B2                     	endif
   883   0008B2                     	if	0	;tblptru may be non-zero
   884   0008B2                     	endif
   885   0008B2  0008               	tblrd		*
   886   0008B4  50F5               	movf	tablat,w,c
   887   0008B6  6E01               	movwf	fputc@c^0,c
   888   0008B8  6A02               	clrf	(fputc@c+1)^0,c
   889   0008BA  C029  F003         	movff	vfpfcnvrt@fp,fputc@fp
   890   0008BE  C02A  F004         	movff	vfpfcnvrt@fp+1,fputc@fp+1
   891   0008C2  EC66  F004         	call	_fputc	;wreg free
   892   0008C6  EF48  F004         	goto	l1355
   893   0008CA                     l789:
   894   0008CA  0012               	return		;funcret
   895   0008CC                     __end_of_vfpfcnvrt:
   896                           	callstack 0
   897                           
   898 ;; *************** function _dtoa *****************
   899 ;; Defined at:
   900 ;;		line 470 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
   901 ;; Parameters:    Size  Location     Type
   902 ;;  fp              2   27[COMRAM] PTR struct _IO_FILE
   903 ;;		 -> sprintf@f(12), 
   904 ;;  d               2   29[COMRAM] int 
   905 ;; Auto vars:     Size  Location     Type
   906 ;;  i               2   37[COMRAM] int 
   907 ;;  w               2   35[COMRAM] int 
   908 ;;  p               2   33[COMRAM] int 
   909 ;;  s               1   39[COMRAM] unsigned char 
   910 ;; Return value:  Size  Location     Type
   911 ;;                  1    wreg      void 
   912 ;; Registers used:
   913 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   914 ;; Tracked objects:
   915 ;;		On entry : 0/0
   916 ;;		On exit  : 0/0
   917 ;;		Unchanged: 0/0
   918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   919 ;;      Params:         4       0       0       0       0       0       0
   920 ;;      Locals:         9       0       0       0       0       0       0
   921 ;;      Temps:          0       0       0       0       0       0       0
   922 ;;      Totals:        13       0       0       0       0       0       0
   923 ;;Total ram usage:       13 bytes
   924 ;; Hardware stack levels used: 1
   925 ;; Hardware stack levels required when called: 4
   926 ;; This function calls:
   927 ;;		___awdiv
   928 ;;		___awmod
   929 ;;		_abs
   930 ;;		_pad
   931 ;; This function is called by:
   932 ;;		_vfpfcnvrt
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text4
   937   000616                     __ptext4:
   938                           	callstack 0
   939   000616                     _dtoa:
   940                           	callstack 23
   941   000616                     
   942                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 470: static void 
      +                          dtoa(FILE *fp, vfpf_sint_t d);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\commo
      +                          n\doprnt.c: 471: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c:
      +                           472:  char s;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 473
      +                          :     int i, p, w;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c:
      +                           476:     s = d < 0 ? 1 : 0;
   943   000616  BE1F               	btfsc	(dtoa@d+1)^0,7,c
   944   000618  EF10  F003         	goto	u591
   945   00061C  EF13  F003         	goto	u590
   946   000620                     u591:
   947   000620  0E01               	movlw	1
   948   000622  EF14  F003         	goto	u600
   949   000626                     u590:
   950   000626  0E00               	movlw	0
   951   000628                     u600:
   952   000628  6E28               	movwf	dtoa@s^0,c
   953   00062A                     
   954                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 477:     if (s) {
   955   00062A  5028               	movf	dtoa@s^0,w,c
   956   00062C  B4D8               	btfsc	status,2,c
   957   00062E  EF1B  F003         	goto	u611
   958   000632  EF1D  F003         	goto	u610
   959   000636                     u611:
   960   000636  EF21  F003         	goto	l1277
   961   00063A                     u610:
   962   00063A                     
   963                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 478:         d = 
      +                          -d;
   964   00063A  6C1E               	negf	dtoa@d^0,c
   965   00063C  1E1F               	comf	(dtoa@d+1)^0,f,c
   966   00063E  B0D8               	btfsc	status,0,c
   967   000640  2A1F               	incf	(dtoa@d+1)^0,f,c
   968   000642                     l1277:
   969                           
   970                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 487:     p = (0 <
      +                          = prec) ? prec : 1;
   971   000642  BE57               	btfsc	(_prec+1)^0,7,c
   972   000644  EF28  F003         	goto	u620
   973   000648  EF26  F003         	goto	u621
   974   00064C                     u621:
   975   00064C  EF2E  F003         	goto	l768
   976   000650                     u620:
   977   000650  0E00               	movlw	0
   978   000652  6E23               	movwf	(dtoa@p+1)^0,c
   979   000654  0E01               	movlw	1
   980   000656  6E22               	movwf	dtoa@p^0,c
   981   000658  EF32  F003         	goto	l770
   982   00065C                     l768:
   983   00065C  C056  F022         	movff	_prec,dtoa@p
   984   000660  C057  F023         	movff	_prec+1,dtoa@p+1
   985   000664                     l770:
   986                           
   987                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 488:     w = widt
      +                          h;
   988   000664  C054  F024         	movff	_width,dtoa@w
   989   000668  C055  F025         	movff	_width+1,dtoa@w+1
   990   00066C                     
   991                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 489:     if (s
   992   00066C  5028               	movf	dtoa@s^0,w,c
   993   00066E  B4D8               	btfsc	status,2,c
   994   000670  EF3C  F003         	goto	u631
   995   000674  EF3E  F003         	goto	u630
   996   000678                     u631:
   997   000678  EF55  F003         	goto	l771
   998   00067C                     u630:
   999   00067C                     
  1000                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 493:     ) {;C:\P
      +                          rogram Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 494:         --w;
  1001   00067C  0624               	decf	dtoa@w^0,f,c
  1002   00067E  A0D8               	btfss	status,0,c
  1003   000680  0625               	decf	(dtoa@w+1)^0,f,c
  1004   000682                     
  1005                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 495:   s = s ? '-
      +                          ' : '+';
  1006   000682  5028               	movf	dtoa@s^0,w,c
  1007   000684  A4D8               	btfss	status,2,c
  1008   000686  EF47  F003         	goto	u641
  1009   00068A  EF49  F003         	goto	u640
  1010   00068E                     u641:
  1011   00068E  EF4F  F003         	goto	l1289
  1012   000692                     u640:
  1013   000692  0E00               	movlw	0
  1014   000694  6E21               	movwf	(_dtoa$725+1)^0,c
  1015   000696  0E2B               	movlw	43
  1016   000698  6E20               	movwf	_dtoa$725^0,c
  1017   00069A  EF53  F003         	goto	l1291
  1018   00069E                     l1289:
  1019   00069E  0E00               	movlw	0
  1020   0006A0  6E21               	movwf	(_dtoa$725+1)^0,c
  1021   0006A2  0E2D               	movlw	45
  1022   0006A4  6E20               	movwf	_dtoa$725^0,c
  1023   0006A6                     l1291:
  1024   0006A6  C020  F028         	movff	_dtoa$725,dtoa@s
  1025   0006AA                     l771:
  1026                           
  1027                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 505:     i = size
      +                          of(dbuf) - 1;
  1028   0006AA  0E00               	movlw	0
  1029   0006AC  6E27               	movwf	(dtoa@i+1)^0,c
  1030   0006AE  0E1F               	movlw	31
  1031   0006B0  6E26               	movwf	dtoa@i^0,c
  1032   0006B2                     
  1033                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 506:     dbuf[i] 
      +                          = '\0';
  1034   0006B2  0E00               	movlw	0
  1035   0006B4  0100               	movlb	0	; () banked
  1036   0006B6  6F7F               	movwf	(_dbuf+31)& (0+255),b
  1037                           
  1038                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 507:     while (!
      +                          (i < 1) && (d || (0 < p)
  1039   0006B8  EF8E  F003         	goto	l1305
  1040   0006BC                     l1295:
  1041                           
  1042                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 511:     )) {;C:\
      +                          Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 512:         --i;
  1043   0006BC  0626               	decf	dtoa@i^0,f,c
  1044   0006BE  A0D8               	btfss	status,0,c
  1045   0006C0  0627               	decf	(dtoa@i+1)^0,f,c
  1046   0006C2                     
  1047                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 513:         dbuf
      +                          [i] = (char)((int)'0' + abs(d % 10));
  1048   0006C2  0E60               	movlw	low _dbuf
  1049   0006C4  2426               	addwf	dtoa@i^0,w,c
  1050   0006C6  6ED9               	movwf	fsr2l,c
  1051   0006C8  0E00               	movlw	high _dbuf
  1052   0006CA  2027               	addwfc	(dtoa@i+1)^0,w,c
  1053   0006CC  6EDA               	movwf	fsr2h,c
  1054   0006CE  C01E  F001         	movff	dtoa@d,___awmod@dividend
  1055   0006D2  C01F  F002         	movff	dtoa@d+1,___awmod@dividend+1
  1056   0006D6  0E00               	movlw	0
  1057   0006D8  6E04               	movwf	(___awmod@divisor+1)^0,c
  1058   0006DA  0E0A               	movlw	10
  1059   0006DC  6E03               	movwf	___awmod@divisor^0,c
  1060   0006DE  EC2D  F005         	call	___awmod	;wreg free
  1061   0006E2  C001  F007         	movff	?___awmod,abs@a
  1062   0006E6  C002  F008         	movff	?___awmod+1,abs@a+1
  1063   0006EA  ECFC  F006         	call	_abs	;wreg free
  1064   0006EE  5007               	movf	?_abs^0,w,c
  1065   0006F0  0F30               	addlw	48
  1066   0006F2  6EDF               	movwf	indf2,c
  1067   0006F4                     
  1068                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 514:         --p;
  1069   0006F4  0622               	decf	dtoa@p^0,f,c
  1070   0006F6  A0D8               	btfss	status,0,c
  1071   0006F8  0623               	decf	(dtoa@p+1)^0,f,c
  1072   0006FA                     
  1073                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 515:         --w;
  1074   0006FA  0624               	decf	dtoa@w^0,f,c
  1075   0006FC  A0D8               	btfss	status,0,c
  1076   0006FE  0625               	decf	(dtoa@w+1)^0,f,c
  1077   000700                     
  1078                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 516:         d = 
      +                          d / 10;
  1079   000700  C01E  F001         	movff	dtoa@d,___awdiv@dividend
  1080   000704  C01F  F002         	movff	dtoa@d+1,___awdiv@dividend+1
  1081   000708  0E00               	movlw	0
  1082   00070A  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1083   00070C  0E0A               	movlw	10
  1084   00070E  6E03               	movwf	___awdiv@divisor^0,c
  1085   000710  ECCB  F004         	call	___awdiv	;wreg free
  1086   000714  C001  F01E         	movff	?___awdiv,dtoa@d
  1087   000718  C002  F01F         	movff	?___awdiv+1,dtoa@d+1
  1088   00071C                     l1305:
  1089                           
  1090                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 507:     while (!
      +                          (i < 1) && (d || (0 < p)
  1091   00071C  BE27               	btfsc	(dtoa@i+1)^0,7,c
  1092   00071E  EF99  F003         	goto	u651
  1093   000722  5027               	movf	(dtoa@i+1)^0,w,c
  1094   000724  E108               	bnz	u650
  1095   000726  0426               	decf	dtoa@i^0,w,c
  1096   000728  A0D8               	btfss	status,0,c
  1097   00072A  EF99  F003         	goto	u651
  1098   00072E  EF9B  F003         	goto	u650
  1099   000732                     u651:
  1100   000732  EFB1  F003         	goto	l1311
  1101   000736                     u650:
  1102   000736  501E               	movf	dtoa@d^0,w,c
  1103   000738  101F               	iorwf	(dtoa@d+1)^0,w,c
  1104   00073A  A4D8               	btfss	status,2,c
  1105   00073C  EFA2  F003         	goto	u661
  1106   000740  EFA4  F003         	goto	u660
  1107   000744                     u661:
  1108   000744  EF5E  F003         	goto	l1295
  1109   000748                     u660:
  1110   000748  BE23               	btfsc	(dtoa@p+1)^0,7,c
  1111   00074A  EFB1  F003         	goto	u670
  1112   00074E  5023               	movf	(dtoa@p+1)^0,w,c
  1113   000750  E106               	bnz	u671
  1114   000752  0422               	decf	dtoa@p^0,w,c
  1115   000754  B0D8               	btfsc	status,0,c
  1116   000756  EFAF  F003         	goto	u671
  1117   00075A  EFB1  F003         	goto	u670
  1118   00075E                     u671:
  1119   00075E  EF5E  F003         	goto	l1295
  1120   000762                     u670:
  1121   000762                     l1311:
  1122                           
  1123                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 520:     if (s !=
      +                           0) {
  1124   000762  5028               	movf	dtoa@s^0,w,c
  1125   000764  B4D8               	btfsc	status,2,c
  1126   000766  EFB7  F003         	goto	u681
  1127   00076A  EFB9  F003         	goto	u680
  1128   00076E                     u681:
  1129   00076E  EFC4  F003         	goto	l1317
  1130   000772                     u680:
  1131   000772                     
  1132                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 521:         --i;
  1133   000772  0626               	decf	dtoa@i^0,f,c
  1134   000774  A0D8               	btfss	status,0,c
  1135   000776  0627               	decf	(dtoa@i+1)^0,f,c
  1136   000778                     
  1137                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 522:         dbuf
      +                          [i] = s;
  1138   000778  0E60               	movlw	low _dbuf
  1139   00077A  2426               	addwf	dtoa@i^0,w,c
  1140   00077C  6ED9               	movwf	fsr2l,c
  1141   00077E  0E00               	movlw	high _dbuf
  1142   000780  2027               	addwfc	(dtoa@i+1)^0,w,c
  1143   000782  6EDA               	movwf	fsr2h,c
  1144   000784  C028  FFDF         	movff	dtoa@s,indf2
  1145   000788                     l1317:
  1146                           
  1147                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 526:     return (
      +                          void) pad(fp, &dbuf[i], w);
  1148   000788  C01C  F011         	movff	dtoa@fp,pad@fp
  1149   00078C  C01D  F012         	movff	dtoa@fp+1,pad@fp+1
  1150   000790  0E60               	movlw	low _dbuf
  1151   000792  2426               	addwf	dtoa@i^0,w,c
  1152   000794  6E13               	movwf	pad@buf^0,c
  1153   000796  0E00               	movlw	high _dbuf
  1154   000798  2027               	addwfc	(dtoa@i+1)^0,w,c
  1155   00079A  6E14               	movwf	(pad@buf+1)^0,c
  1156   00079C  C024  F015         	movff	dtoa@w,pad@p
  1157   0007A0  C025  F016         	movff	dtoa@w+1,pad@p+1
  1158   0007A4  ECCA  F005         	call	_pad	;wreg free
  1159   0007A8  0012               	return		;funcret
  1160   0007AA                     __end_of_dtoa:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _pad *****************
  1164 ;; Defined at:
  1165 ;;		line 152 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  fp              2   16[COMRAM] PTR struct _IO_FILE
  1168 ;;		 -> sprintf@f(12), 
  1169 ;;  buf             2   18[COMRAM] PTR unsigned char 
  1170 ;;		 -> dbuf(32), 
  1171 ;;  p               2   20[COMRAM] int 
  1172 ;; Auto vars:     Size  Location     Type
  1173 ;;  w               2   25[COMRAM] int 
  1174 ;;  i               2   23[COMRAM] int 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1184 ;;      Params:         6       0       0       0       0       0       0
  1185 ;;      Locals:         4       0       0       0       0       0       0
  1186 ;;      Temps:          1       0       0       0       0       0       0
  1187 ;;      Totals:        11       0       0       0       0       0       0
  1188 ;;Total ram usage:       11 bytes
  1189 ;; Hardware stack levels used: 1
  1190 ;; Hardware stack levels required when called: 3
  1191 ;; This function calls:
  1192 ;;		_fputc
  1193 ;;		_fputs
  1194 ;; This function is called by:
  1195 ;;		_dtoa
  1196 ;; This function uses a non-reentrant model
  1197 ;;
  1198                           
  1199                           	psect	text5
  1200   000B94                     __ptext5:
  1201                           	callstack 0
  1202   000B94                     _pad:
  1203                           	callstack 23
  1204   000B94                     
  1205                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 152: static void 
      +                          pad(FILE *fp, char *buf, int p);C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\com
      +                          mon\doprnt.c: 153: {;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.
      +                          c: 154:     int i, w;;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt
      +                          .c: 164:     w = (p < 0) ? 0 : p;
  1206   000B94  BE16               	btfsc	(pad@p+1)^0,7,c
  1207   000B96  EFCF  F005         	goto	u561
  1208   000B9A  EFD1  F005         	goto	u560
  1209   000B9E                     u561:
  1210   000B9E  EFD7  F005         	goto	l1257
  1211   000BA2                     u560:
  1212   000BA2  C015  F01A         	movff	pad@p,pad@w
  1213   000BA6  C016  F01B         	movff	pad@p+1,pad@w+1
  1214   000BAA  EFDB  F005         	goto	l759
  1215   000BAE                     l1257:
  1216   000BAE  0E00               	movlw	0
  1217   000BB0  6E1B               	movwf	(pad@w+1)^0,c
  1218   000BB2  0E00               	movlw	0
  1219   000BB4  6E1A               	movwf	pad@w^0,c
  1220   000BB6                     l759:
  1221                           
  1222                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 165:     i = 0;
  1223   000BB6  0E00               	movlw	0
  1224   000BB8  6E19               	movwf	(pad@i+1)^0,c
  1225   000BBA  0E00               	movlw	0
  1226   000BBC  6E18               	movwf	pad@i^0,c
  1227                           
  1228                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 166:     while (i
      +                           < w) {
  1229   000BBE  EFED  F005         	goto	l1263
  1230   000BC2                     l1259:
  1231                           
  1232                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 167:         fput
      +                          c(' ', fp);
  1233   000BC2  0E00               	movlw	0
  1234   000BC4  6E02               	movwf	(fputc@c+1)^0,c
  1235   000BC6  0E20               	movlw	32
  1236   000BC8  6E01               	movwf	fputc@c^0,c
  1237   000BCA  C011  F003         	movff	pad@fp,fputc@fp
  1238   000BCE  C012  F004         	movff	pad@fp+1,fputc@fp+1
  1239   000BD2  EC66  F004         	call	_fputc	;wreg free
  1240   000BD6                     
  1241                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 168:         ++i;
  1242   000BD6  4A18               	infsnz	pad@i^0,f,c
  1243   000BD8  2A19               	incf	(pad@i+1)^0,f,c
  1244   000BDA                     l1263:
  1245                           
  1246                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 166:     while (i
      +                           < w) {
  1247   000BDA  501A               	movf	pad@w^0,w,c
  1248   000BDC  5C18               	subwf	pad@i^0,w,c
  1249   000BDE  5019               	movf	(pad@i+1)^0,w,c
  1250   000BE0  0A80               	xorlw	128
  1251   000BE2  6E17               	movwf	??_pad^0,c
  1252   000BE4  501B               	movf	(pad@w+1)^0,w,c
  1253   000BE6  0A80               	xorlw	128
  1254   000BE8  5817               	subwfb	??_pad^0,w,c
  1255   000BEA  A0D8               	btfss	status,0,c
  1256   000BEC  EFFA  F005         	goto	u571
  1257   000BF0  EFFC  F005         	goto	u570
  1258   000BF4                     u571:
  1259   000BF4  EFE1  F005         	goto	l1259
  1260   000BF8                     u570:
  1261   000BF8                     
  1262                           ;C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\doprnt.c: 175:         fput
      +                          s((const char *)buf, fp);
  1263   000BF8  C013  F00A         	movff	pad@buf,fputs@s
  1264   000BFC  C014  F00B         	movff	pad@buf+1,fputs@s+1
  1265   000C00  C011  F00C         	movff	pad@fp,fputs@fp
  1266   000C04  C012  F00D         	movff	pad@fp+1,fputs@fp+1
  1267   000C08  ECB9  F006         	call	_fputs	;wreg free
  1268   000C0C  0012               	return		;funcret
  1269   000C0E                     __end_of_pad:
  1270                           	callstack 0
  1271                           
  1272 ;; *************** function _fputs *****************
  1273 ;; Defined at:
  1274 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputs.c"
  1275 ;; Parameters:    Size  Location     Type
  1276 ;;  s               2    9[COMRAM] PTR const unsigned char 
  1277 ;;		 -> dbuf(32), 
  1278 ;;  fp              2   11[COMRAM] PTR struct _IO_FILE
  1279 ;;		 -> sprintf@f(12), 
  1280 ;; Auto vars:     Size  Location     Type
  1281 ;;  i               2   14[COMRAM] int 
  1282 ;;  c               1   13[COMRAM] unsigned char 
  1283 ;; Return value:  Size  Location     Type
  1284 ;;                  2    9[COMRAM] int 
  1285 ;; Registers used:
  1286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1287 ;; Tracked objects:
  1288 ;;		On entry : 0/0
  1289 ;;		On exit  : 0/0
  1290 ;;		Unchanged: 0/0
  1291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1292 ;;      Params:         4       0       0       0       0       0       0
  1293 ;;      Locals:         3       0       0       0       0       0       0
  1294 ;;      Temps:          0       0       0       0       0       0       0
  1295 ;;      Totals:         7       0       0       0       0       0       0
  1296 ;;Total ram usage:        7 bytes
  1297 ;; Hardware stack levels used: 1
  1298 ;; Hardware stack levels required when called: 2
  1299 ;; This function calls:
  1300 ;;		_fputc
  1301 ;; This function is called by:
  1302 ;;		_pad
  1303 ;; This function uses a non-reentrant model
  1304 ;;
  1305                           
  1306                           	psect	text6
  1307   000D72                     __ptext6:
  1308                           	callstack 0
  1309   000D72                     _fputs:
  1310                           	callstack 23
  1311   000D72  0E00               	movlw	0
  1312   000D74  6E10               	movwf	(fputs@i+1)^0,c
  1313   000D76  0E00               	movlw	0
  1314   000D78  6E0F               	movwf	fputs@i^0,c
  1315   000D7A  EFCA  F006         	goto	l1171
  1316   000D7E                     l1167:
  1317   000D7E  C00E  F001         	movff	fputs@c,fputc@c
  1318   000D82  6A02               	clrf	(fputc@c+1)^0,c
  1319   000D84  C00C  F003         	movff	fputs@fp,fputc@fp
  1320   000D88  C00D  F004         	movff	fputs@fp+1,fputc@fp+1
  1321   000D8C  EC66  F004         	call	_fputc	;wreg free
  1322   000D90  4A0F               	infsnz	fputs@i^0,f,c
  1323   000D92  2A10               	incf	(fputs@i+1)^0,f,c
  1324   000D94                     l1171:
  1325   000D94  500F               	movf	fputs@i^0,w,c
  1326   000D96  240A               	addwf	fputs@s^0,w,c
  1327   000D98  6ED9               	movwf	fsr2l,c
  1328   000D9A  5010               	movf	(fputs@i+1)^0,w,c
  1329   000D9C  200B               	addwfc	(fputs@s+1)^0,w,c
  1330   000D9E  6EDA               	movwf	fsr2h,c
  1331   000DA0  50DF               	movf	indf2,w,c
  1332   000DA2  6E0E               	movwf	fputs@c^0,c
  1333   000DA4  500E               	movf	fputs@c^0,w,c
  1334   000DA6  A4D8               	btfss	status,2,c
  1335   000DA8  EFD8  F006         	goto	u431
  1336   000DAC  EFDA  F006         	goto	u430
  1337   000DB0                     u431:
  1338   000DB0  EFBF  F006         	goto	l1167
  1339   000DB4                     u430:
  1340   000DB4  0012               	return		;funcret
  1341   000DB6                     __end_of_fputs:
  1342                           	callstack 0
  1343                           
  1344 ;; *************** function _fputc *****************
  1345 ;; Defined at:
  1346 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\nf_fputc.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;  c               2    0[COMRAM] int 
  1349 ;;  fp              2    2[COMRAM] PTR struct _IO_FILE
  1350 ;;		 -> sprintf@f(12), 
  1351 ;; Auto vars:     Size  Location     Type
  1352 ;;		None
  1353 ;; Return value:  Size  Location     Type
  1354 ;;                  2    0[COMRAM] int 
  1355 ;; Registers used:
  1356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1357 ;; Tracked objects:
  1358 ;;		On entry : 0/0
  1359 ;;		On exit  : 0/0
  1360 ;;		Unchanged: 0/0
  1361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1362 ;;      Params:         4       0       0       0       0       0       0
  1363 ;;      Locals:         0       0       0       0       0       0       0
  1364 ;;      Temps:          5       0       0       0       0       0       0
  1365 ;;      Totals:         9       0       0       0       0       0       0
  1366 ;;Total ram usage:        9 bytes
  1367 ;; Hardware stack levels used: 1
  1368 ;; Hardware stack levels required when called: 1
  1369 ;; This function calls:
  1370 ;;		_putch
  1371 ;; This function is called by:
  1372 ;;		_pad
  1373 ;;		_vfpfcnvrt
  1374 ;;		_fputs
  1375 ;; This function uses a non-reentrant model
  1376 ;;
  1377                           
  1378                           	psect	text7
  1379   0008CC                     __ptext7:
  1380                           	callstack 0
  1381   0008CC                     _fputc:
  1382                           	callstack 26
  1383   0008CC  5003               	movf	fputc@fp^0,w,c
  1384   0008CE  1004               	iorwf	(fputc@fp+1)^0,w,c
  1385   0008D0  B4D8               	btfsc	status,2,c
  1386   0008D2  EF6D  F004         	goto	u391
  1387   0008D6  EF6F  F004         	goto	u390
  1388   0008DA                     u391:
  1389   0008DA  EF78  F004         	goto	l1155
  1390   0008DE                     u390:
  1391   0008DE  5003               	movf	fputc@fp^0,w,c
  1392   0008E0  1004               	iorwf	(fputc@fp+1)^0,w,c
  1393   0008E2  A4D8               	btfss	status,2,c
  1394   0008E4  EF76  F004         	goto	u401
  1395   0008E8  EF78  F004         	goto	u400
  1396   0008EC                     u401:
  1397   0008EC  EF7D  F004         	goto	l1157
  1398   0008F0                     u400:
  1399   0008F0                     l1155:
  1400   0008F0  5001               	movf	fputc@c^0,w,c
  1401   0008F2  EC56  F007         	call	_putch
  1402   0008F6  EFCA  F004         	goto	l814
  1403   0008FA                     l1157:
  1404   0008FA  EE20 F00A          	lfsr	2,10
  1405   0008FE  5003               	movf	fputc@fp^0,w,c
  1406   000900  26D9               	addwf	fsr2l,f,c
  1407   000902  5004               	movf	(fputc@fp+1)^0,w,c
  1408   000904  22DA               	addwfc	fsr2h,f,c
  1409   000906  50DE               	movf	postinc2,w,c
  1410   000908  10DE               	iorwf	postinc2,w,c
  1411   00090A  B4D8               	btfsc	status,2,c
  1412   00090C  EF8A  F004         	goto	u411
  1413   000910  EF8C  F004         	goto	u410
  1414   000914                     u411:
  1415   000914  EFA7  F004         	goto	l1161
  1416   000918                     u410:
  1417   000918  EE20 F00A          	lfsr	2,10
  1418   00091C  5003               	movf	fputc@fp^0,w,c
  1419   00091E  26D9               	addwf	fsr2l,f,c
  1420   000920  5004               	movf	(fputc@fp+1)^0,w,c
  1421   000922  22DA               	addwfc	fsr2h,f,c
  1422   000924  EE10 F003          	lfsr	1,3
  1423   000928  5003               	movf	fputc@fp^0,w,c
  1424   00092A  26E1               	addwf	fsr1l,f,c
  1425   00092C  5004               	movf	(fputc@fp+1)^0,w,c
  1426   00092E  22E2               	addwfc	fsr1h,f,c
  1427   000930  50DE               	movf	postinc2,w,c
  1428   000932  5CE6               	subwf	postinc1,w,c
  1429   000934  50E6               	movf	postinc1,w,c
  1430   000936  0A80               	xorlw	128
  1431   000938  6E09               	movwf	(??_fputc+4)^0,c
  1432   00093A  50DE               	movf	postinc2,w,c
  1433   00093C  0A80               	xorlw	128
  1434   00093E  5809               	subwfb	(??_fputc+4)^0,w,c
  1435   000940  B0D8               	btfsc	status,0,c
  1436   000942  EFA5  F004         	goto	u421
  1437   000946  EFA7  F004         	goto	u420
  1438   00094A                     u421:
  1439   00094A  EFCA  F004         	goto	l814
  1440   00094E                     u420:
  1441   00094E                     l1161:
  1442   00094E  EE20 F003          	lfsr	2,3
  1443   000952  5003               	movf	fputc@fp^0,w,c
  1444   000954  26D9               	addwf	fsr2l,f,c
  1445   000956  5004               	movf	(fputc@fp+1)^0,w,c
  1446   000958  22DA               	addwfc	fsr2h,f,c
  1447   00095A  CFDE F005          	movff	postinc2,??_fputc
  1448   00095E  CFDD F006          	movff	postdec2,??_fputc+1
  1449   000962  C003  FFD9         	movff	fputc@fp,fsr2l
  1450   000966  C004  FFDA         	movff	fputc@fp+1,fsr2h
  1451   00096A  CFDE F007          	movff	postinc2,??_fputc+2
  1452   00096E  CFDD F008          	movff	postdec2,??_fputc+3
  1453   000972  5005               	movf	??_fputc^0,w,c
  1454   000974  2407               	addwf	(??_fputc+2)^0,w,c
  1455   000976  6ED9               	movwf	fsr2l,c
  1456   000978  5006               	movf	(??_fputc+1)^0,w,c
  1457   00097A  2008               	addwfc	(??_fputc+3)^0,w,c
  1458   00097C  6EDA               	movwf	fsr2h,c
  1459   00097E  C001  FFDF         	movff	fputc@c,indf2
  1460   000982  EE20 F003          	lfsr	2,3
  1461   000986  5003               	movf	fputc@fp^0,w,c
  1462   000988  26D9               	addwf	fsr2l,f,c
  1463   00098A  5004               	movf	(fputc@fp+1)^0,w,c
  1464   00098C  22DA               	addwfc	fsr2h,f,c
  1465   00098E  2ADE               	incf	postinc2,f,c
  1466   000990  0E00               	movlw	0
  1467   000992  22DD               	addwfc	postdec2,f,c
  1468   000994                     l814:
  1469   000994  0012               	return		;funcret
  1470   000996                     __end_of_fputc:
  1471                           	callstack 0
  1472                           
  1473 ;; *************** function _putch *****************
  1474 ;; Defined at:
  1475 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\putch.c"
  1476 ;; Parameters:    Size  Location     Type
  1477 ;;  c               1    wreg     unsigned char 
  1478 ;; Auto vars:     Size  Location     Type
  1479 ;;  c               1    0[COMRAM] unsigned char 
  1480 ;; Return value:  Size  Location     Type
  1481 ;;                  1    wreg      void 
  1482 ;; Registers used:
  1483 ;;		wreg
  1484 ;; Tracked objects:
  1485 ;;		On entry : 0/0
  1486 ;;		On exit  : 0/0
  1487 ;;		Unchanged: 0/0
  1488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1489 ;;      Params:         0       0       0       0       0       0       0
  1490 ;;      Locals:         0       0       0       0       0       0       0
  1491 ;;      Temps:          0       0       0       0       0       0       0
  1492 ;;      Totals:         0       0       0       0       0       0       0
  1493 ;;Total ram usage:        0 bytes
  1494 ;; Hardware stack levels used: 1
  1495 ;; This function calls:
  1496 ;;		Nothing
  1497 ;; This function is called by:
  1498 ;;		_fputc
  1499 ;; This function uses a non-reentrant model
  1500 ;;
  1501                           
  1502                           	psect	text8
  1503   000EAC                     __ptext8:
  1504                           	callstack 0
  1505   000EAC                     _putch:
  1506                           	callstack 26
  1507   000EAC  0012               	return		;funcret
  1508   000EAE                     __end_of_putch:
  1509                           	callstack 0
  1510                           
  1511 ;; *************** function _abs *****************
  1512 ;; Defined at:
  1513 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\abs.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  a               2    6[COMRAM] int 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;		None
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  2    6[COMRAM] int 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2, status,0
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1527 ;;      Params:         2       0       0       0       0       0       0
  1528 ;;      Locals:         0       0       0       0       0       0       0
  1529 ;;      Temps:          2       0       0       0       0       0       0
  1530 ;;      Totals:         4       0       0       0       0       0       0
  1531 ;;Total ram usage:        4 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; This function calls:
  1534 ;;		Nothing
  1535 ;; This function is called by:
  1536 ;;		_dtoa
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540                           	psect	text9
  1541   000DF8                     __ptext9:
  1542                           	callstack 0
  1543   000DF8                     _abs:
  1544                           	callstack 26
  1545   000DF8  BE08               	btfsc	(abs@a+1)^0,7,c
  1546   000DFA  EF09  F007         	goto	u580
  1547   000DFE  5008               	movf	(abs@a+1)^0,w,c
  1548   000E00  E106               	bnz	u581
  1549   000E02  0407               	decf	abs@a^0,w,c
  1550   000E04  B0D8               	btfsc	status,0,c
  1551   000E06  EF07  F007         	goto	u581
  1552   000E0A  EF09  F007         	goto	u580
  1553   000E0E                     u581:
  1554   000E0E  EF17  F007         	goto	l799
  1555   000E12                     u580:
  1556   000E12  C007  F009         	movff	abs@a,??_abs
  1557   000E16  C008  F00A         	movff	abs@a+1,??_abs+1
  1558   000E1A  1E09               	comf	??_abs^0,f,c
  1559   000E1C  1E0A               	comf	(??_abs+1)^0,f,c
  1560   000E1E  4A09               	infsnz	??_abs^0,f,c
  1561   000E20  2A0A               	incf	(??_abs+1)^0,f,c
  1562   000E22  C009  F007         	movff	??_abs,?_abs
  1563   000E26  C00A  F008         	movff	??_abs+1,?_abs+1
  1564   000E2A  EF1B  F007         	goto	l802
  1565   000E2E                     l799:
  1566   000E2E  C007  F007         	movff	abs@a,?_abs
  1567   000E32  C008  F008         	movff	abs@a+1,?_abs+1
  1568   000E36                     l802:
  1569   000E36  0012               	return		;funcret
  1570   000E38                     __end_of_abs:
  1571                           	callstack 0
  1572                           
  1573 ;; *************** function ___awmod *****************
  1574 ;; Defined at:
  1575 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awmod.c"
  1576 ;; Parameters:    Size  Location     Type
  1577 ;;  dividend        2    0[COMRAM] int 
  1578 ;;  divisor         2    2[COMRAM] int 
  1579 ;; Auto vars:     Size  Location     Type
  1580 ;;  sign            1    5[COMRAM] unsigned char 
  1581 ;;  counter         1    4[COMRAM] unsigned char 
  1582 ;; Return value:  Size  Location     Type
  1583 ;;                  2    0[COMRAM] int 
  1584 ;; Registers used:
  1585 ;;		wreg, status,2, status,0
  1586 ;; Tracked objects:
  1587 ;;		On entry : 0/0
  1588 ;;		On exit  : 0/0
  1589 ;;		Unchanged: 0/0
  1590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1591 ;;      Params:         4       0       0       0       0       0       0
  1592 ;;      Locals:         2       0       0       0       0       0       0
  1593 ;;      Temps:          0       0       0       0       0       0       0
  1594 ;;      Totals:         6       0       0       0       0       0       0
  1595 ;;Total ram usage:        6 bytes
  1596 ;; Hardware stack levels used: 1
  1597 ;; This function calls:
  1598 ;;		Nothing
  1599 ;; This function is called by:
  1600 ;;		_dtoa
  1601 ;; This function uses a non-reentrant model
  1602 ;;
  1603                           
  1604                           	psect	text10
  1605   000A5A                     __ptext10:
  1606                           	callstack 0
  1607   000A5A                     ___awmod:
  1608                           	callstack 26
  1609   000A5A  0E00               	movlw	0
  1610   000A5C  6E06               	movwf	___awmod@sign^0,c
  1611   000A5E  BE02               	btfsc	(___awmod@dividend+1)^0,7,c
  1612   000A60  EF36  F005         	goto	u500
  1613   000A64  EF34  F005         	goto	u501
  1614   000A68                     u501:
  1615   000A68  EF3C  F005         	goto	l1225
  1616   000A6C                     u500:
  1617   000A6C  6C01               	negf	___awmod@dividend^0,c
  1618   000A6E  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1619   000A70  B0D8               	btfsc	status,0,c
  1620   000A72  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1621   000A74  0E01               	movlw	1
  1622   000A76  6E06               	movwf	___awmod@sign^0,c
  1623   000A78                     l1225:
  1624   000A78  BE04               	btfsc	(___awmod@divisor+1)^0,7,c
  1625   000A7A  EF43  F005         	goto	u510
  1626   000A7E  EF41  F005         	goto	u511
  1627   000A82                     u511:
  1628   000A82  EF47  F005         	goto	l1229
  1629   000A86                     u510:
  1630   000A86  6C03               	negf	___awmod@divisor^0,c
  1631   000A88  1E04               	comf	(___awmod@divisor+1)^0,f,c
  1632   000A8A  B0D8               	btfsc	status,0,c
  1633   000A8C  2A04               	incf	(___awmod@divisor+1)^0,f,c
  1634   000A8E                     l1229:
  1635   000A8E  5003               	movf	___awmod@divisor^0,w,c
  1636   000A90  1004               	iorwf	(___awmod@divisor+1)^0,w,c
  1637   000A92  B4D8               	btfsc	status,2,c
  1638   000A94  EF4E  F005         	goto	u521
  1639   000A98  EF50  F005         	goto	u520
  1640   000A9C                     u521:
  1641   000A9C  EF74  F005         	goto	l1245
  1642   000AA0                     u520:
  1643   000AA0  0E01               	movlw	1
  1644   000AA2  6E05               	movwf	___awmod@counter^0,c
  1645   000AA4  EF58  F005         	goto	l1235
  1646   000AA8                     l1233:
  1647   000AA8  90D8               	bcf	status,0,c
  1648   000AAA  3603               	rlcf	___awmod@divisor^0,f,c
  1649   000AAC  3604               	rlcf	(___awmod@divisor+1)^0,f,c
  1650   000AAE  2A05               	incf	___awmod@counter^0,f,c
  1651   000AB0                     l1235:
  1652   000AB0  AE04               	btfss	(___awmod@divisor+1)^0,7,c
  1653   000AB2  EF5D  F005         	goto	u531
  1654   000AB6  EF5F  F005         	goto	u530
  1655   000ABA                     u531:
  1656   000ABA  EF54  F005         	goto	l1233
  1657   000ABE                     u530:
  1658   000ABE                     l1237:
  1659   000ABE  5003               	movf	___awmod@divisor^0,w,c
  1660   000AC0  5C01               	subwf	___awmod@dividend^0,w,c
  1661   000AC2  5004               	movf	(___awmod@divisor+1)^0,w,c
  1662   000AC4  5802               	subwfb	(___awmod@dividend+1)^0,w,c
  1663   000AC6  A0D8               	btfss	status,0,c
  1664   000AC8  EF68  F005         	goto	u541
  1665   000ACC  EF6A  F005         	goto	u540
  1666   000AD0                     u541:
  1667   000AD0  EF6E  F005         	goto	l1241
  1668   000AD4                     u540:
  1669   000AD4  5003               	movf	___awmod@divisor^0,w,c
  1670   000AD6  5E01               	subwf	___awmod@dividend^0,f,c
  1671   000AD8  5004               	movf	(___awmod@divisor+1)^0,w,c
  1672   000ADA  5A02               	subwfb	(___awmod@dividend+1)^0,f,c
  1673   000ADC                     l1241:
  1674   000ADC  90D8               	bcf	status,0,c
  1675   000ADE  3204               	rrcf	(___awmod@divisor+1)^0,f,c
  1676   000AE0  3203               	rrcf	___awmod@divisor^0,f,c
  1677   000AE2  2E05               	decfsz	___awmod@counter^0,f,c
  1678   000AE4  EF5F  F005         	goto	l1237
  1679   000AE8                     l1245:
  1680   000AE8  5006               	movf	___awmod@sign^0,w,c
  1681   000AEA  B4D8               	btfsc	status,2,c
  1682   000AEC  EF7A  F005         	goto	u551
  1683   000AF0  EF7C  F005         	goto	u550
  1684   000AF4                     u551:
  1685   000AF4  EF80  F005         	goto	l1249
  1686   000AF8                     u550:
  1687   000AF8  6C01               	negf	___awmod@dividend^0,c
  1688   000AFA  1E02               	comf	(___awmod@dividend+1)^0,f,c
  1689   000AFC  B0D8               	btfsc	status,0,c
  1690   000AFE  2A02               	incf	(___awmod@dividend+1)^0,f,c
  1691   000B00                     l1249:
  1692   000B00  C001  F001         	movff	___awmod@dividend,?___awmod
  1693   000B04  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  1694   000B08  0012               	return		;funcret
  1695   000B0A                     __end_of___awmod:
  1696                           	callstack 0
  1697                           
  1698 ;; *************** function ___awdiv *****************
  1699 ;; Defined at:
  1700 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.41\pic\sources\c99\common\awdiv.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;  dividend        2    0[COMRAM] int 
  1703 ;;  divisor         2    2[COMRAM] int 
  1704 ;; Auto vars:     Size  Location     Type
  1705 ;;  quotient        2    6[COMRAM] int 
  1706 ;;  sign            1    5[COMRAM] unsigned char 
  1707 ;;  counter         1    4[COMRAM] unsigned char 
  1708 ;; Return value:  Size  Location     Type
  1709 ;;                  2    0[COMRAM] int 
  1710 ;; Registers used:
  1711 ;;		wreg, status,2, status,0
  1712 ;; Tracked objects:
  1713 ;;		On entry : 0/0
  1714 ;;		On exit  : 0/0
  1715 ;;		Unchanged: 0/0
  1716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1717 ;;      Params:         4       0       0       0       0       0       0
  1718 ;;      Locals:         4       0       0       0       0       0       0
  1719 ;;      Temps:          0       0       0       0       0       0       0
  1720 ;;      Totals:         8       0       0       0       0       0       0
  1721 ;;Total ram usage:        8 bytes
  1722 ;; Hardware stack levels used: 1
  1723 ;; This function calls:
  1724 ;;		Nothing
  1725 ;; This function is called by:
  1726 ;;		_dtoa
  1727 ;; This function uses a non-reentrant model
  1728 ;;
  1729                           
  1730                           	psect	text11
  1731   000996                     __ptext11:
  1732                           	callstack 0
  1733   000996                     ___awdiv:
  1734                           	callstack 26
  1735   000996  0E00               	movlw	0
  1736   000998  6E06               	movwf	___awdiv@sign^0,c
  1737   00099A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1738   00099C  EFD4  F004         	goto	u440
  1739   0009A0  EFD2  F004         	goto	u441
  1740   0009A4                     u441:
  1741   0009A4  EFDA  F004         	goto	l1181
  1742   0009A8                     u440:
  1743   0009A8  6C03               	negf	___awdiv@divisor^0,c
  1744   0009AA  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1745   0009AC  B0D8               	btfsc	status,0,c
  1746   0009AE  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1747   0009B0  0E01               	movlw	1
  1748   0009B2  6E06               	movwf	___awdiv@sign^0,c
  1749   0009B4                     l1181:
  1750   0009B4  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1751   0009B6  EFE1  F004         	goto	u450
  1752   0009BA  EFDF  F004         	goto	u451
  1753   0009BE                     u451:
  1754   0009BE  EFE7  F004         	goto	l1187
  1755   0009C2                     u450:
  1756   0009C2  6C01               	negf	___awdiv@dividend^0,c
  1757   0009C4  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1758   0009C6  B0D8               	btfsc	status,0,c
  1759   0009C8  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1760   0009CA  0E01               	movlw	1
  1761   0009CC  1A06               	xorwf	___awdiv@sign^0,f,c
  1762   0009CE                     l1187:
  1763   0009CE  0E00               	movlw	0
  1764   0009D0  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1765   0009D2  0E00               	movlw	0
  1766   0009D4  6E07               	movwf	___awdiv@quotient^0,c
  1767   0009D6  5003               	movf	___awdiv@divisor^0,w,c
  1768   0009D8  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1769   0009DA  B4D8               	btfsc	status,2,c
  1770   0009DC  EFF2  F004         	goto	u461
  1771   0009E0  EFF4  F004         	goto	u460
  1772   0009E4                     u461:
  1773   0009E4  EF1C  F005         	goto	l1209
  1774   0009E8                     u460:
  1775   0009E8  0E01               	movlw	1
  1776   0009EA  6E05               	movwf	___awdiv@counter^0,c
  1777   0009EC  EFFC  F004         	goto	l1195
  1778   0009F0                     l1193:
  1779   0009F0  90D8               	bcf	status,0,c
  1780   0009F2  3603               	rlcf	___awdiv@divisor^0,f,c
  1781   0009F4  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1782   0009F6  2A05               	incf	___awdiv@counter^0,f,c
  1783   0009F8                     l1195:
  1784   0009F8  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1785   0009FA  EF01  F005         	goto	u471
  1786   0009FE  EF03  F005         	goto	u470
  1787   000A02                     u471:
  1788   000A02  EFF8  F004         	goto	l1193
  1789   000A06                     u470:
  1790   000A06                     l1197:
  1791   000A06  90D8               	bcf	status,0,c
  1792   000A08  3607               	rlcf	___awdiv@quotient^0,f,c
  1793   000A0A  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1794   000A0C  5003               	movf	___awdiv@divisor^0,w,c
  1795   000A0E  5C01               	subwf	___awdiv@dividend^0,w,c
  1796   000A10  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1797   000A12  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1798   000A14  A0D8               	btfss	status,0,c
  1799   000A16  EF0F  F005         	goto	u481
  1800   000A1A  EF11  F005         	goto	u480
  1801   000A1E                     u481:
  1802   000A1E  EF16  F005         	goto	l1205
  1803   000A22                     u480:
  1804   000A22  5003               	movf	___awdiv@divisor^0,w,c
  1805   000A24  5E01               	subwf	___awdiv@dividend^0,f,c
  1806   000A26  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1807   000A28  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1808   000A2A  8007               	bsf	___awdiv@quotient^0,0,c
  1809   000A2C                     l1205:
  1810   000A2C  90D8               	bcf	status,0,c
  1811   000A2E  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1812   000A30  3203               	rrcf	___awdiv@divisor^0,f,c
  1813   000A32  2E05               	decfsz	___awdiv@counter^0,f,c
  1814   000A34  EF03  F005         	goto	l1197
  1815   000A38                     l1209:
  1816   000A38  5006               	movf	___awdiv@sign^0,w,c
  1817   000A3A  B4D8               	btfsc	status,2,c
  1818   000A3C  EF22  F005         	goto	u491
  1819   000A40  EF24  F005         	goto	u490
  1820   000A44                     u491:
  1821   000A44  EF28  F005         	goto	l1213
  1822   000A48                     u490:
  1823   000A48  6C07               	negf	___awdiv@quotient^0,c
  1824   000A4A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1825   000A4C  B0D8               	btfsc	status,0,c
  1826   000A4E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1827   000A50                     l1213:
  1828   000A50  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1829   000A54  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1830   000A58  0012               	return		;funcret
  1831   000A5A                     __end_of___awdiv:
  1832                           	callstack 0
  1833                           
  1834 ;; *************** function _lcd_puts *****************
  1835 ;; Defined at:
  1836 ;;		line 57 in file "LCD.c"
  1837 ;; Parameters:    Size  Location     Type
  1838 ;;  s               2    2[COMRAM] PTR const unsigned char 
  1839 ;;		 -> line(17), STR_1(17), 
  1840 ;; Auto vars:     Size  Location     Type
  1841 ;;		None
  1842 ;; Return value:  Size  Location     Type
  1843 ;;                  1    wreg      void 
  1844 ;; Registers used:
  1845 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1846 ;; Tracked objects:
  1847 ;;		On entry : 0/0
  1848 ;;		On exit  : 0/0
  1849 ;;		Unchanged: 0/0
  1850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1851 ;;      Params:         2       0       0       0       0       0       0
  1852 ;;      Locals:         0       0       0       0       0       0       0
  1853 ;;      Temps:          0       0       0       0       0       0       0
  1854 ;;      Totals:         2       0       0       0       0       0       0
  1855 ;;Total ram usage:        2 bytes
  1856 ;; Hardware stack levels used: 1
  1857 ;; Hardware stack levels required when called: 1
  1858 ;; This function calls:
  1859 ;;		_lcd_write
  1860 ;; This function is called by:
  1861 ;;		_main
  1862 ;; This function uses a non-reentrant model
  1863 ;;
  1864                           
  1865                           	psect	text12
  1866   000C78                     __ptext12:
  1867                           	callstack 0
  1868   000C78                     _lcd_puts:
  1869                           	callstack 29
  1870   000C78                     
  1871                           ;LCD.c: 57: lcd_puts(const char * s);LCD.c: 58: {;LCD.c: 59:  PORTBbits.RB4 = 1;
  1872   000C78  8881               	bsf	129,4,c	;volatile
  1873                           
  1874                           ;LCD.c: 60:  while(*s)
  1875   000C7A  EF53  F006         	goto	l1433
  1876   000C7E                     l1429:
  1877                           
  1878                           ;LCD.c: 61:   lcd_write(*s++);
  1879   000C7E  C003  FFF6         	movff	lcd_puts@s,tblptrl
  1880   000C82  C004  FFF7         	movff	lcd_puts@s+1,tblptrh
  1881   000C86  6AF8               	clrf	tblptru,c
  1882   000C88  0E05               	movlw	(high __ramtop+-1)
  1883   000C8A  64F7               	cpfsgt	tblptrh,c
  1884   000C8C  D003               	bra	u737
  1885   000C8E  0008               	tblrd		*
  1886   000C90  50F5               	movf	tablat,w,c
  1887   000C92  D005               	bra	u730
  1888   000C94                     u737:
  1889   000C94  CFF6 FFE1          	movff	tblptrl,fsr1l
  1890   000C98  CFF7 FFE2          	movff	tblptrh,fsr1h
  1891   000C9C  50E7               	movf	indf1,w,c
  1892   000C9E                     u730:
  1893   000C9E  EC1C  F007         	call	_lcd_write
  1894   000CA2  4A03               	infsnz	lcd_puts@s^0,f,c
  1895   000CA4  2A04               	incf	(lcd_puts@s+1)^0,f,c
  1896   000CA6                     l1433:
  1897                           
  1898                           ;LCD.c: 60:  while(*s)
  1899   000CA6  C003  FFF6         	movff	lcd_puts@s,tblptrl
  1900   000CAA  C004  FFF7         	movff	lcd_puts@s+1,tblptrh
  1901   000CAE  6AF8               	clrf	tblptru,c
  1902   000CB0  0E05               	movlw	(high __ramtop+-1)
  1903   000CB2  64F7               	cpfsgt	tblptrh,c
  1904   000CB4  D003               	bra	u747
  1905   000CB6  0008               	tblrd		*
  1906   000CB8  50F5               	movf	tablat,w,c
  1907   000CBA  D005               	bra	u740
  1908   000CBC                     u747:
  1909   000CBC  CFF6 FFE1          	movff	tblptrl,fsr1l
  1910   000CC0  CFF7 FFE2          	movff	tblptrh,fsr1h
  1911   000CC4  50E7               	movf	indf1,w,c
  1912   000CC6                     u740:
  1913   000CC6  0900               	iorlw	0
  1914   000CC8  A4D8               	btfss	status,2,c
  1915   000CCA  EF69  F006         	goto	u751
  1916   000CCE  EF6B  F006         	goto	u750
  1917   000CD2                     u751:
  1918   000CD2  EF3F  F006         	goto	l1429
  1919   000CD6                     u750:
  1920   000CD6  0012               	return		;funcret
  1921   000CD8                     __end_of_lcd_puts:
  1922                           	callstack 0
  1923                           
  1924 ;; *************** function _lcd_init *****************
  1925 ;; Defined at:
  1926 ;;		line 87 in file "LCD.c"
  1927 ;; Parameters:    Size  Location     Type
  1928 ;;		None
  1929 ;; Auto vars:     Size  Location     Type
  1930 ;;  init_value      1    0        unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  1    wreg      void 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0, cstack
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1940 ;;      Params:         0       0       0       0       0       0       0
  1941 ;;      Locals:         0       0       0       0       0       0       0
  1942 ;;      Temps:          1       0       0       0       0       0       0
  1943 ;;      Totals:         1       0       0       0       0       0       0
  1944 ;;Total ram usage:        1 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; Hardware stack levels required when called: 2
  1947 ;; This function calls:
  1948 ;;		_lcd_clear
  1949 ;;		_lcd_write
  1950 ;; This function is called by:
  1951 ;;		_main
  1952 ;; This function uses a non-reentrant model
  1953 ;;
  1954                           
  1955                           	psect	text13
  1956   000C0E                     __ptext13:
  1957                           	callstack 0
  1958   000C0E                     _lcd_init:
  1959                           	callstack 28
  1960   000C0E                     
  1961                           ;LCD.c: 96:  PORTBbits.RB4 = 0;
  1962   000C0E  9881               	bcf	129,4,c	;volatile
  1963   000C10                     
  1964                           ;LCD.c: 97:  PORTBbits.RB5 = 0;
  1965   000C10  9A81               	bcf	129,5,c	;volatile
  1966   000C12                     
  1967                           ;LCD.c: 99:  _delay((unsigned long)((15)*(8000000/4000.0)));
  1968   000C12  0E27               	movlw	39
  1969   000C14  6E04               	movwf	??_lcd_init^0,c
  1970   000C16  0EF5               	movlw	245
  1971   000C18                     u787:
  1972   000C18  2EE8               	decfsz	wreg,f,c
  1973   000C1A  D7FE               	bra	u787
  1974   000C1C  2E04               	decfsz	??_lcd_init^0,f,c
  1975   000C1E  D7FC               	bra	u787
  1976   000C20  F000               	nop	
  1977   000C22                     
  1978                           ;LCD.c: 100:  PORTB = (PORTB & 0xF0)+init_value;
  1979   000C22  5081               	movf	129,w,c	;volatile
  1980   000C24  0BF0               	andlw	240
  1981   000C26  0F03               	addlw	3
  1982   000C28  6E81               	movwf	129,c	;volatile
  1983   000C2A                     
  1984                           ;LCD.c: 101:  ((PORTBbits.RB5 = 1),(PORTBbits.RB5=0));
  1985   000C2A  8A81               	bsf	129,5,c	;volatile
  1986   000C2C  9A81               	bcf	129,5,c	;volatile
  1987   000C2E                     
  1988                           ;LCD.c: 102:  _delay((unsigned long)((5)*(8000000/4000.0)));
  1989   000C2E  0E0D               	movlw	13
  1990   000C30  6E04               	movwf	??_lcd_init^0,c
  1991   000C32  0EFC               	movlw	252
  1992   000C34                     u797:
  1993   000C34  2EE8               	decfsz	wreg,f,c
  1994   000C36  D7FE               	bra	u797
  1995   000C38  2E04               	decfsz	??_lcd_init^0,f,c
  1996   000C3A  D7FC               	bra	u797
  1997   000C3C                     
  1998                           ;LCD.c: 103:  ((PORTBbits.RB5 = 1),(PORTBbits.RB5=0));
  1999   000C3C  8A81               	bsf	129,5,c	;volatile
  2000   000C3E  9A81               	bcf	129,5,c	;volatile
  2001   000C40                     
  2002                           ;LCD.c: 104:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2003   000C40  0E85               	movlw	133
  2004   000C42                     u807:
  2005   000C42  2EE8               	decfsz	wreg,f,c
  2006   000C44  D7FE               	bra	u807
  2007   000C46  F000               	nop	
  2008   000C48                     
  2009                           ;LCD.c: 105:  ((PORTBbits.RB5 = 1),(PORTBbits.RB5=0));
  2010   000C48  8A81               	bsf	129,5,c	;volatile
  2011   000C4A  9A81               	bcf	129,5,c	;volatile
  2012   000C4C                     
  2013                           ;LCD.c: 106:  _delay((unsigned long)((200)*(8000000/4000000.0)));
  2014   000C4C  0E85               	movlw	133
  2015   000C4E                     u817:
  2016   000C4E  2EE8               	decfsz	wreg,f,c
  2017   000C50  D7FE               	bra	u817
  2018   000C52  F000               	nop	
  2019   000C54                     
  2020                           ;LCD.c: 107:  PORTB = (PORTB & 0xF0)+2;
  2021   000C54  5081               	movf	129,w,c	;volatile
  2022   000C56  0BF0               	andlw	240
  2023   000C58  0F02               	addlw	2
  2024   000C5A  6E81               	movwf	129,c	;volatile
  2025   000C5C                     
  2026                           ;LCD.c: 108:  ((PORTBbits.RB5 = 1),(PORTBbits.RB5=0));
  2027   000C5C  8A81               	bsf	129,5,c	;volatile
  2028   000C5E  9A81               	bcf	129,5,c	;volatile
  2029   000C60                     
  2030                           ;LCD.c: 110:  lcd_write(0x28);
  2031   000C60  0E28               	movlw	40
  2032   000C62  EC1C  F007         	call	_lcd_write
  2033   000C66                     
  2034                           ;LCD.c: 111:  lcd_write(0xC);
  2035   000C66  0E0C               	movlw	12
  2036   000C68  EC1C  F007         	call	_lcd_write
  2037   000C6C                     
  2038                           ;LCD.c: 112:  lcd_clear();
  2039   000C6C  EC39  F007         	call	_lcd_clear	;wreg free
  2040   000C70                     
  2041                           ;LCD.c: 113:  lcd_write(0x6);
  2042   000C70  0E06               	movlw	6
  2043   000C72  EC1C  F007         	call	_lcd_write
  2044   000C76  0012               	return		;funcret
  2045   000C78                     __end_of_lcd_init:
  2046                           	callstack 0
  2047                           
  2048 ;; *************** function _lcd_clear *****************
  2049 ;; Defined at:
  2050 ;;		line 47 in file "LCD.c"
  2051 ;; Parameters:    Size  Location     Type
  2052 ;;		None
  2053 ;; Auto vars:     Size  Location     Type
  2054 ;;		None
  2055 ;; Return value:  Size  Location     Type
  2056 ;;                  1    wreg      void 
  2057 ;; Registers used:
  2058 ;;		wreg, status,2, status,0, cstack
  2059 ;; Tracked objects:
  2060 ;;		On entry : 0/0
  2061 ;;		On exit  : 0/0
  2062 ;;		Unchanged: 0/0
  2063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2064 ;;      Params:         0       0       0       0       0       0       0
  2065 ;;      Locals:         0       0       0       0       0       0       0
  2066 ;;      Temps:          1       0       0       0       0       0       0
  2067 ;;      Totals:         1       0       0       0       0       0       0
  2068 ;;Total ram usage:        1 bytes
  2069 ;; Hardware stack levels used: 1
  2070 ;; Hardware stack levels required when called: 1
  2071 ;; This function calls:
  2072 ;;		_lcd_write
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;;		_lcd_init
  2076 ;; This function uses a non-reentrant model
  2077 ;;
  2078                           
  2079                           	psect	text14
  2080   000E72                     __ptext14:
  2081                           	callstack 0
  2082   000E72                     _lcd_clear:
  2083                           	callstack 28
  2084   000E72                     
  2085                           ;LCD.c: 49:  PORTBbits.RB4 = 0;
  2086   000E72  9881               	bcf	129,4,c	;volatile
  2087   000E74                     
  2088                           ;LCD.c: 50:  lcd_write(0x1);
  2089   000E74  0E01               	movlw	1
  2090   000E76  EC1C  F007         	call	_lcd_write
  2091   000E7A                     
  2092                           ;LCD.c: 51:  _delay((unsigned long)((2)*(8000000/4000.0)));
  2093   000E7A  0E06               	movlw	6
  2094   000E7C  6E03               	movwf	??_lcd_clear^0,c
  2095   000E7E  0E30               	movlw	48
  2096   000E80                     u827:
  2097   000E80  2EE8               	decfsz	wreg,f,c
  2098   000E82  D7FE               	bra	u827
  2099   000E84  2E03               	decfsz	??_lcd_clear^0,f,c
  2100   000E86  D7FC               	bra	u827
  2101   000E88  D000               	nop2	
  2102   000E8A  0012               	return		;funcret
  2103   000E8C                     __end_of_lcd_clear:
  2104                           	callstack 0
  2105                           
  2106 ;; *************** function _lcd_goto *****************
  2107 ;; Defined at:
  2108 ;;		line 79 in file "LCD.c"
  2109 ;; Parameters:    Size  Location     Type
  2110 ;;  pos             1    wreg     unsigned char 
  2111 ;; Auto vars:     Size  Location     Type
  2112 ;;  pos             1    2[COMRAM] unsigned char 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  1    wreg      void 
  2115 ;; Registers used:
  2116 ;;		wreg, status,2, status,0, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2122 ;;      Params:         0       0       0       0       0       0       0
  2123 ;;      Locals:         1       0       0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0
  2125 ;;      Totals:         1       0       0       0       0       0       0
  2126 ;;Total ram usage:        1 bytes
  2127 ;; Hardware stack levels used: 1
  2128 ;; Hardware stack levels required when called: 1
  2129 ;; This function calls:
  2130 ;;		_lcd_write
  2131 ;; This function is called by:
  2132 ;;		_main
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text15
  2137   000E9E                     __ptext15:
  2138                           	callstack 0
  2139   000E9E                     _lcd_goto:
  2140                           	callstack 29
  2141                           
  2142                           ;incstack = 0
  2143                           ;lcd_goto@pos stored from wreg
  2144   000E9E  6E03               	movwf	lcd_goto@pos^0,c
  2145   000EA0                     
  2146                           ;LCD.c: 79: lcd_goto(unsigned char pos);LCD.c: 80: {;LCD.c: 81:  PORTBbits.RB4 = 0;
  2147   000EA0  9881               	bcf	129,4,c	;volatile
  2148   000EA2                     
  2149                           ;LCD.c: 82:  lcd_write(0x80+pos);
  2150   000EA2  5003               	movf	lcd_goto@pos^0,w,c
  2151   000EA4  0F80               	addlw	128
  2152   000EA6  EC1C  F007         	call	_lcd_write
  2153   000EAA  0012               	return		;funcret
  2154   000EAC                     __end_of_lcd_goto:
  2155                           	callstack 0
  2156                           
  2157 ;; *************** function _lcd_write *****************
  2158 ;; Defined at:
  2159 ;;		line 33 in file "LCD.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  c               1    wreg     unsigned char 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  c               1    1[COMRAM] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;                  1    wreg      void 
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0, cstack
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2173 ;;      Params:         0       0       0       0       0       0       0
  2174 ;;      Locals:         1       0       0       0       0       0       0
  2175 ;;      Temps:          1       0       0       0       0       0       0
  2176 ;;      Totals:         2       0       0       0       0       0       0
  2177 ;;Total ram usage:        2 bytes
  2178 ;; Hardware stack levels used: 1
  2179 ;; This function calls:
  2180 ;;		Nothing
  2181 ;; This function is called by:
  2182 ;;		_lcd_clear
  2183 ;;		_lcd_puts
  2184 ;;		_lcd_goto
  2185 ;;		_lcd_init
  2186 ;;		_lcd_putch
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           	psect	text16
  2191   000E38                     __ptext16:
  2192                           	callstack 0
  2193   000E38                     _lcd_write:
  2194                           	callstack 29
  2195                           
  2196                           ;incstack = 0
  2197                           ;lcd_write@c stored from wreg
  2198   000E38  6E02               	movwf	lcd_write@c^0,c
  2199   000E3A                     
  2200                           ;LCD.c: 33: lcd_write(unsigned char c);LCD.c: 34: {;LCD.c: 35:  _delay((unsigned long)((
      +                          40)*(8000000/4000000.0)));
  2201   000E3A  0E1A               	movlw	26
  2202   000E3C                     u837:
  2203   000E3C  2EE8               	decfsz	wreg,f,c
  2204   000E3E  D7FE               	bra	u837
  2205   000E40  D000               	nop2	
  2206   000E42                     
  2207                           ;LCD.c: 36:  PORTB = (PORTB & 0xF0)+( ( c >> 4 ) & 0x0F );
  2208   000E42  C002  F001         	movff	lcd_write@c,??_lcd_write
  2209   000E46  3A01               	swapf	??_lcd_write^0,f,c
  2210   000E48  0E0F               	movlw	15
  2211   000E4A  1601               	andwf	??_lcd_write^0,f,c
  2212   000E4C  0E0F               	movlw	15
  2213   000E4E  1601               	andwf	??_lcd_write^0,f,c
  2214   000E50  5081               	movf	129,w,c	;volatile
  2215   000E52  0BF0               	andlw	240
  2216   000E54  2401               	addwf	??_lcd_write^0,w,c
  2217   000E56  6E81               	movwf	129,c	;volatile
  2218   000E58                     
  2219                           ;LCD.c: 37:  ((PORTBbits.RB5 = 1),(PORTBbits.RB5=0));
  2220   000E58  8A81               	bsf	129,5,c	;volatile
  2221   000E5A  9A81               	bcf	129,5,c	;volatile
  2222   000E5C                     
  2223                           ;LCD.c: 38:  PORTB = (PORTB & 0xF0)+( c & 0x0F );
  2224   000E5C  C002  F001         	movff	lcd_write@c,??_lcd_write
  2225   000E60  0E0F               	movlw	15
  2226   000E62  1601               	andwf	??_lcd_write^0,f,c
  2227   000E64  5081               	movf	129,w,c	;volatile
  2228   000E66  0BF0               	andlw	240
  2229   000E68  2401               	addwf	??_lcd_write^0,w,c
  2230   000E6A  6E81               	movwf	129,c	;volatile
  2231   000E6C                     
  2232                           ;LCD.c: 39:  ((PORTBbits.RB5 = 1),(PORTBbits.RB5=0));
  2233   000E6C  8A81               	bsf	129,5,c	;volatile
  2234   000E6E  9A81               	bcf	129,5,c	;volatile
  2235   000E70  0012               	return		;funcret
  2236   000E72                     __end_of_lcd_write:
  2237                           	callstack 0
  2238                           
  2239                           	psect	rparam
  2240   000000                     
  2241                           	psect	idloc
  2242                           
  2243                           ;Config register IDLOC0 @ 0x200000
  2244                           ;	unspecified, using default values
  2245   200000                     	org	2097152
  2246   200000  FF                 	db	255
  2247                           
  2248                           ;Config register IDLOC1 @ 0x200001
  2249                           ;	unspecified, using default values
  2250   200001                     	org	2097153
  2251   200001  FF                 	db	255
  2252                           
  2253                           ;Config register IDLOC2 @ 0x200002
  2254                           ;	unspecified, using default values
  2255   200002                     	org	2097154
  2256   200002  FF                 	db	255
  2257                           
  2258                           ;Config register IDLOC3 @ 0x200003
  2259                           ;	unspecified, using default values
  2260   200003                     	org	2097155
  2261   200003  FF                 	db	255
  2262                           
  2263                           ;Config register IDLOC4 @ 0x200004
  2264                           ;	unspecified, using default values
  2265   200004                     	org	2097156
  2266   200004  FF                 	db	255
  2267                           
  2268                           ;Config register IDLOC5 @ 0x200005
  2269                           ;	unspecified, using default values
  2270   200005                     	org	2097157
  2271   200005  FF                 	db	255
  2272                           
  2273                           ;Config register IDLOC6 @ 0x200006
  2274                           ;	unspecified, using default values
  2275   200006                     	org	2097158
  2276   200006  FF                 	db	255
  2277                           
  2278                           ;Config register IDLOC7 @ 0x200007
  2279                           ;	unspecified, using default values
  2280   200007                     	org	2097159
  2281   200007  FF                 	db	255
  2282                           
  2283                           	psect	config
  2284                           
  2285                           ; Padding undefined space
  2286   300000                     	org	3145728
  2287   300000  FF                 	db	255
  2288                           
  2289                           ;Config register CONFIG1H @ 0x300001
  2290                           ;	Oscillator Selection bits
  2291                           ;	FOSC = HSHP, HS oscillator (high power > 16 MHz)
  2292                           ;	4X PLL Enable
  2293                           ;	PLLCFG = 0x0, unprogrammed default
  2294                           ;	Primary clock enable bit
  2295                           ;	PRICLKEN = 0x1, unprogrammed default
  2296                           ;	Fail-Safe Clock Monitor Enable bit
  2297                           ;	FCMEN = 0x0, unprogrammed default
  2298                           ;	Internal/External Oscillator Switchover bit
  2299                           ;	IESO = 0x0, unprogrammed default
  2300   300001                     	org	3145729
  2301   300001  22                 	db	34
  2302                           
  2303                           ;Config register CONFIG2L @ 0x300002
  2304                           ;	unspecified, using default values
  2305                           ;	Power-up Timer Enable bit
  2306                           ;	PWRTEN = 0x1, unprogrammed default
  2307                           ;	Brown-out Reset Enable bits
  2308                           ;	BOREN = 0x3, unprogrammed default
  2309                           ;	Brown Out Reset Voltage bits
  2310                           ;	BORV = 0x3, unprogrammed default
  2311   300002                     	org	3145730
  2312   300002  1F                 	db	31
  2313                           
  2314                           ;Config register CONFIG2H @ 0x300003
  2315                           ;	Watchdog Timer Enable bits
  2316                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2317                           ;	Watchdog Timer Postscale Select bits
  2318                           ;	WDTPS = 0xF, unprogrammed default
  2319   300003                     	org	3145731
  2320   300003  3C                 	db	60
  2321                           
  2322                           ; Padding undefined space
  2323   300004                     	org	3145732
  2324   300004  FF                 	db	255
  2325                           
  2326                           ;Config register CONFIG3H @ 0x300005
  2327                           ;	unspecified, using default values
  2328                           ;	CCP2 MUX bit
  2329                           ;	CCP2MX = 0x1, unprogrammed default
  2330                           ;	PORTB A/D Enable bit
  2331                           ;	PBADEN = 0x1, unprogrammed default
  2332                           ;	P3A/CCP3 Mux bit
  2333                           ;	CCP3MX = 0x1, unprogrammed default
  2334                           ;	HFINTOSC Fast Start-up
  2335                           ;	HFOFST = 0x1, unprogrammed default
  2336                           ;	Timer3 Clock input mux bit
  2337                           ;	T3CMX = 0x1, unprogrammed default
  2338                           ;	ECCP2 B output mux bit
  2339                           ;	P2BMX = 0x1, unprogrammed default
  2340                           ;	MCLR Pin Enable bit
  2341                           ;	MCLRE = 0x1, unprogrammed default
  2342   300005                     	org	3145733
  2343   300005  BF                 	db	191
  2344                           
  2345                           ;Config register CONFIG4L @ 0x300006
  2346                           ;	unspecified, using default values
  2347                           ;	Stack Full/Underflow Reset Enable bit
  2348                           ;	STVREN = 0x1, unprogrammed default
  2349                           ;	Single-Supply ICSP Enable bit
  2350                           ;	LVP = 0x1, unprogrammed default
  2351                           ;	Extended Instruction Set Enable bit
  2352                           ;	XINST = 0x0, unprogrammed default
  2353                           ;	Background Debug
  2354                           ;	DEBUG = 0x1, unprogrammed default
  2355   300006                     	org	3145734
  2356   300006  85                 	db	133
  2357                           
  2358                           ; Padding undefined space
  2359   300007                     	org	3145735
  2360   300007  FF                 	db	255
  2361                           
  2362                           ;Config register CONFIG5L @ 0x300008
  2363                           ;	unspecified, using default values
  2364                           ;	Code Protection Block 0
  2365                           ;	CP0 = 0x1, unprogrammed default
  2366                           ;	Code Protection Block 1
  2367                           ;	CP1 = 0x1, unprogrammed default
  2368                           ;	Code Protection Block 2
  2369                           ;	CP2 = 0x1, unprogrammed default
  2370                           ;	Code Protection Block 3
  2371                           ;	CP3 = 0x1, unprogrammed default
  2372   300008                     	org	3145736
  2373   300008  0F                 	db	15
  2374                           
  2375                           ;Config register CONFIG5H @ 0x300009
  2376                           ;	unspecified, using default values
  2377                           ;	Boot Block Code Protection bit
  2378                           ;	CPB = 0x1, unprogrammed default
  2379                           ;	Data EEPROM Code Protection bit
  2380                           ;	CPD = 0x1, unprogrammed default
  2381   300009                     	org	3145737
  2382   300009  C0                 	db	192
  2383                           
  2384                           ;Config register CONFIG6L @ 0x30000A
  2385                           ;	unspecified, using default values
  2386                           ;	Write Protection Block 0
  2387                           ;	WRT0 = 0x1, unprogrammed default
  2388                           ;	Write Protection Block 1
  2389                           ;	WRT1 = 0x1, unprogrammed default
  2390                           ;	Write Protection Block 2
  2391                           ;	WRT2 = 0x1, unprogrammed default
  2392                           ;	Write Protection Block 3
  2393                           ;	WRT3 = 0x1, unprogrammed default
  2394   30000A                     	org	3145738
  2395   30000A  0F                 	db	15
  2396                           
  2397                           ;Config register CONFIG6H @ 0x30000B
  2398                           ;	unspecified, using default values
  2399                           ;	Configuration Register Write Protection bit
  2400                           ;	WRTC = 0x1, unprogrammed default
  2401                           ;	Boot Block Write Protection bit
  2402                           ;	WRTB = 0x1, unprogrammed default
  2403                           ;	Data EEPROM Write Protection bit
  2404                           ;	WRTD = 0x1, unprogrammed default
  2405   30000B                     	org	3145739
  2406   30000B  E0                 	db	224
  2407                           
  2408                           ;Config register CONFIG7L @ 0x30000C
  2409                           ;	unspecified, using default values
  2410                           ;	Table Read Protection Block 0
  2411                           ;	EBTR0 = 0x1, unprogrammed default
  2412                           ;	Table Read Protection Block 1
  2413                           ;	EBTR1 = 0x1, unprogrammed default
  2414                           ;	Table Read Protection Block 2
  2415                           ;	EBTR2 = 0x1, unprogrammed default
  2416                           ;	Table Read Protection Block 3
  2417                           ;	EBTR3 = 0x1, unprogrammed default
  2418   30000C                     	org	3145740
  2419   30000C  0F                 	db	15
  2420                           
  2421                           ;Config register CONFIG7H @ 0x30000D
  2422                           ;	unspecified, using default values
  2423                           ;	Boot Block Table Read Protection bit
  2424                           ;	EBTRB = 0x1, unprogrammed default
  2425   30000D                     	org	3145741
  2426   30000D  40                 	db	64
  2427                           tosu	equ	0xFFF
  2428                           tosh	equ	0xFFE
  2429                           tosl	equ	0xFFD
  2430                           stkptr	equ	0xFFC
  2431                           pclatu	equ	0xFFB
  2432                           pclath	equ	0xFFA
  2433                           pcl	equ	0xFF9
  2434                           tblptru	equ	0xFF8
  2435                           tblptrh	equ	0xFF7
  2436                           tblptrl	equ	0xFF6
  2437                           tablat	equ	0xFF5
  2438                           prodh	equ	0xFF4
  2439                           prodl	equ	0xFF3
  2440                           indf0	equ	0xFEF
  2441                           postinc0	equ	0xFEE
  2442                           postdec0	equ	0xFED
  2443                           preinc0	equ	0xFEC
  2444                           plusw0	equ	0xFEB
  2445                           fsr0h	equ	0xFEA
  2446                           fsr0l	equ	0xFE9
  2447                           wreg	equ	0xFE8
  2448                           indf1	equ	0xFE7
  2449                           postinc1	equ	0xFE6
  2450                           postdec1	equ	0xFE5
  2451                           preinc1	equ	0xFE4
  2452                           plusw1	equ	0xFE3
  2453                           fsr1h	equ	0xFE2
  2454                           fsr1l	equ	0xFE1
  2455                           bsr	equ	0xFE0
  2456                           indf2	equ	0xFDF
  2457                           postinc2	equ	0xFDE
  2458                           postdec2	equ	0xFDD
  2459                           preinc2	equ	0xFDC
  2460                           plusw2	equ	0xFDB
  2461                           fsr2h	equ	0xFDA
  2462                           fsr2l	equ	0xFD9
  2463                           status	equ	0xFD8

Data Sizes:
    Strings     20
    Constant    0
    Data        17
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     83      90
    BANK0           160      0      49
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    fputc@fp...source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp...buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    S698$vp	PTR void  size(2) Largest target is 0

    convarg.vp	PTR void  size(2) Largest target is 0

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 12
		 -> sprintf@f(COMRAM[12]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 17
		 -> line(BANK0[17]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    S645$source	PTR const unsigned char  size(2) Largest target is 0

    f...source	PTR const unsigned char  size(2) Largest target is 0

    S645$buffer	PTR unsigned char  size(2) Largest target is 0

    f...buffer	PTR unsigned char  size(2) Largest target is 0

    lcd_puts@s	PTR const unsigned char  size(2) Largest target is 17
		 -> line(BANK0[17]), STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___awmod
    _lcd_puts->_lcd_write
    _lcd_init->_lcd_clear
    _lcd_clear->_lcd_write
    _lcd_goto->_lcd_write

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6009
                                             82 COMRAM     1     1      0
                          _lcd_clear
                           _lcd_goto
                           _lcd_init
                           _lcd_puts
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             22    16      6    5547
                                             62 COMRAM    20    14      6
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6    5196
                                             54 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           19    13      6    4846
                                             40 COMRAM    14     8      6
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                13     9      4    3626
                                             27 COMRAM    13     9      4
                            ___awdiv
                            ___awmod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    1999
                                             16 COMRAM    11     5      6
                              _fputc
                              _fputs
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4     931
                                              9 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4     682
                                              0 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     142
                                              6 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___awmod                                              6     2      4     448
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4     452
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2     241
                                              2 COMRAM     2     0      2
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             2     2      0     111
                                              3 COMRAM     1     1      0
                          _lcd_clear
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_clear                                            1     1      0      44
                                              2 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (1) _lcd_goto                                             1     1      0      66
                                              2 COMRAM     1     1      0
                          _lcd_write
 ---------------------------------------------------------------------------------
 (2) _lcd_write                                            2     2      0      44
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _lcd_clear
     _lcd_write
   _lcd_goto
     _lcd_write
   _lcd_init
     _lcd_clear
     _lcd_write
   _lcd_puts
     _lcd_write
   _sprintf
     _vfprintf
       _vfpfcnvrt
         _dtoa
           ___awdiv
           ___awmod
           _abs
             ___awmod (ARG)
           _pad
             _fputc
               _putch
             _fputs
               _fputc
         _fputc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      20        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      31       4       30.6%
BITBIGSFRhh         6C      0       0      15        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     53      5A       1       94.7%
BITBIGSFRhll        47      0       0      17        0.0%
BITBIGSFRhlh        11      0       0      16        0.0%
BITBIGSFRl           1      0       0      18        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8B      19        0.0%
DATA                 0      0      8B      21        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.41 build 20230208172133 
Symbol Table                                                                                   Tue May 23 11:59:38 2023

                     l41 0E8A                       l53 0EAA                       l38 0E70  
                     l47 0CD6                       l56 0C76             ___awdiv@sign 0006  
                    l303 0B08                      l290 0A58                      l802 0E36  
                    l814 0994                      l822 0DB4                      l825 0EAC  
                    l737 0D70                      l770 0664                      l763 0C0C  
                    l771 06AA                      l782 07A8                      l759 0BB6  
                    l768 065C                      l795 0D24                      l789 08CA  
                    l799 0E2E                      u400 08F0                      u401 08EC  
                    u410 0918                      u411 0914                      u500 0A6C  
                    u420 094E                      u501 0A68                      u421 094A  
                    u510 0A86                      u430 0DB4                      u511 0A82  
                    u431 0DB0                      u440 09A8                      u520 0AA0  
                    u600 0628                      u441 09A4                      u521 0A9C  
                    u450 09C2                      u530 0ABE                      u610 063A  
                    u451 09BE                      u531 0ABA                      u611 0636  
                    u460 09E8                      u540 0AD4                      u620 0650  
                    u700 0818                      u461 09E4                      u541 0AD0  
                    u621 064C                      u701 0814                      u470 0A06  
                    u550 0AF8                      u390 08DE                      u630 067C  
                    u710 0834                      u471 0A02                      u551 0AF4  
                    u391 08DA                      u631 0678                      u711 0830  
                    u480 0A22                      u560 0BA2                      u640 0692  
                    u720 0D1C                      u481 0A1E                      u561 0B9E  
                    u641 068E                      u721 0D18                      u730 0C9E  
                    u490 0A48                      u570 0BF8                      u650 0736  
                    u491 0A44                      u571 0BF4                      u651 0732  
                    u740 0CC6                      u580 0E12                      u660 0748  
                    u581 0E0E                      u661 0744                      u750 0CD6  
                    u670 0762                      u590 0626                      u807 0C42  
                    u751 0CD2                      u671 075E                      u591 0620  
                    u680 0772                      u760 0B84                      u817 0C4E  
                    u737 0C94                      u681 076E                      u761 0B80  
                    u690 07CE                      u827 0E80                      u747 0CBC  
                    u691 07CA                      u837 0E3C                      u777 0B34  
                    u787 0C18                      u797 0C34                      _abs 0DF8  
                    _cnt 0058                      _pad 0B94             ___awmod@sign 0006  
            lcd_goto@pos 0003                      wreg 0FE8                     l1201 0A22  
                   l1211 0A48                     l1203 0A2A                     ?_abs 0007  
                   l1213 0A50                     l1205 0A2C                     l1221 0A6C  
                   l1301 06FA                     l1207 0A32                     l1231 0AA0  
                   l1223 0A74                     l1151 08CC                     l1311 0762  
                   l1303 0700                     l1321 0E3A                     l1401 0C40  
                   l1209 0A38                     l1241 0ADC                     l1233 0AA8  
                   l1225 0A78                     l1217 0A5A                     l1161 094E  
                   l1153 08DE                     l1313 0772                     l1305 071C  
                   l1331 0E6C                     l1323 0E42                     l1411 0C5C  
                   l1403 0C48                     l1243 0AE2                     l1235 0AB0  
                   l1227 0A86                     l1219 0A5E                     l1155 08F0  
                   l1171 0D94                     l1315 0778                     l1307 0736  
                   l1333 0E6E                     l1325 0E58                     l1421 0C70  
                   l1413 0C5E                     l1405 0C4A                     l1181 09B4  
                   l1173 0996                     l1237 0ABE                     l1245 0AE8  
                   l1229 0A8E                     l1157 08FA                     l1165 0D72  
                   l1261 0BD6                     l1253 0B94                     l1317 0788  
                   l1309 0748                     l1341 07E8                     l1327 0E5A  
                   l1423 0EA0                     l1415 0C60                     l1407 0C4C  
                   l1431 0CA2                     l1191 09E8                     l1183 09C2  
                   l1175 099A                     l1247 0AF8                     l1239 0AD4  
                   l1159 0918                     l1167 0D7E                     l1263 0BDA  
                   l1255 0BA2                     l1271 0616                     l1351 0878  
                   l1343 07EC                     l1335 07AA                     l1329 0E5C  
                   l1425 0EA2                     l1417 0C66                     l1409 0C54  
                   l1433 0CA6                     l1193 09F0                     l1185 09CA  
                   l1177 09A8                     l1249 0B00                     l1169 0D90  
                   l1265 0BF8                     l1257 0BAE                     l1281 066C  
                   l1273 062A                     l1345 07FC                     l1337 07CE  
                   l1441 0D46                     l1419 0C6C                     l1427 0C78  
                   l1195 09F8                     l1187 09CE                     l1179 09B0  
                   l1267 0DF8                     l1259 0BC2                     l1291 06A6  
                   l1283 067C                     l1275 063A                     l1355 0890  
                   l1347 0818                     l1339 07DC                     l1371 0CD8  
                   l1443 0D62                     l1435 0D26                     l1451 0B18  
                   l1365 0E72                     l1381 0C0E                     l1429 0C7E  
                   l1197 0A06                     l1189 09D6                     l1269 0E12  
                   l1293 06B2                     l1285 0682                     l1277 0642  
                   l1349 0834                     l1373 0CE4                     l1437 0D36  
                   l1461 0B58                     l1453 0B1C                     l1367 0E74  
                   l1391 0C2A                     l1383 0C0E                     l1199 0A0C  
                   l1295 06BC                     l1287 0692                     l1279 0650  
                   l1359 08A2                     l1375 0D00                     l1439 0D3E  
                   l1463 0B5E                     l1455 0B22                     l1447 0B0A  
                   l1369 0E7A                     l1393 0C2C                     l1385 0C10  
                   l1297 06C2                     l1289 069E                     l1377 0D1C  
                   l1465 0B6A                     l1457 0B2E                     l1449 0B14  
                   l1395 0C2E                     l1387 0C12                     l1299 06F4  
                   l1467 0B6E                     l1459 0B3C                     l1397 0C3C  
                   l1389 0C22                     l1469 0B84                     l1399 0C3E  
                   ?_pad 0011                     STR_1 0601                     STR_2 0612  
                   abs@a 0007                     _dbuf 0060                     _main 0B0A  
                   _dtoa 0616                     _line 0080                     _prec 0056  
                   pad@i 0018                     pad@p 0015                     fsr1h 0FE2  
                   fsr2h 0FDA                     indf1 0FE7                     indf2 0FDF  
                   fsr1l 0FE1                     pad@w 001A                     fsr2l 0FD9  
                   start 0000             ___param_bank 0000                    ??_abs 0009  
                  ??_pad 0017                    ?_main 0001                    ?_dtoa 001C  
        __end_of___awdiv 0A5A          __end_of___awmod 0B0A          ___awdiv@divisor 0003  
        ___awdiv@counter 0005             vfpfcnvrt@fmt 002B                    _PORTB 0F81  
                  _TRISB 0F93                    _flags 005A                    _fputc 08CC  
                  _fputs 0D72                    pad@fp 0011                    _width 0054  
                  _putch 0EAC                    dtoa@d 001E                    dtoa@i 0026  
                  dtoa@p 0022                    dtoa@s 0028                    dtoa@w 0024  
                  tablat 0FF5                    status 0FD8          __end_of_sprintf 0D72  
        __initialization 0DB6             __end_of_main 0B94             __end_of_dtoa 07AA  
                 ??_main 0053                   ??_dtoa 0020            __activetblptr 0002  
                 ?_fputc 0001                   ?_fputs 000A         ___awdiv@dividend 0001  
                 ?_putch 0001                   _ANSELB 0F39             vfprintf@cfmt 003D  
       __end_of_lcd_init 0C78         __end_of_lcd_goto 0EAC         __end_of_lcd_puts 0CD8  
              ??___awdiv 0005                ??___awmod 0005                   clear_0 0DDC  
                 clear_1 0DE8         ___awdiv@quotient 0007          ___awmod@divisor 0003  
                 isa$std 0001          ___awmod@counter 0005                   pad@buf 0013  
                 dtoa@fp 001C                   fputc@c 0001                   fputs@c 000E  
                 fputs@i 000F                   fputs@s 000A             __mediumconst 0000  
                 tblptrh 0FF7                   tblptrl 0FF6                   tblptru 0FF8  
                 putch@c 0001         __end_of_vfprintf 0D26                ??_sprintf 0045  
             __accesstop 0060  __end_of__initialization 0DEE            ___rparam_used 0001  
         __pcstackCOMRAM 0001             __pidataBANK0 0E8C            __end_of_fputc 0996  
          __end_of_fputs 0DB6            __end_of_putch 0EAE                  ??_fputc 0005  
                ??_fputs 000E                  ??_putch 0001               __pbssBANK0 0060  
              ?_lcd_init 0001                ?_lcd_goto 0001                ?_lcd_puts 0003  
                __Hparam 0000                  __Lparam 0000        __end_of_lcd_clear 0E8C  
                ___awdiv 0996                  ___awmod 0A5A        __end_of_lcd_write 0E72  
              ?_vfprintf 0037             __psmallconst 0600                  __pcinit 0DB6  
                __ramtop 0600                  __ptext0 0B0A                  __ptext1 0D26  
                __ptext2 0CD8                  __ptext3 07AA                  __ptext4 0616  
                __ptext5 0B94                  __ptext6 0D72                  __ptext7 08CC  
                __ptext8 0EAC                  __ptext9 0DF8         ___awmod@dividend 0001  
                _sprintf 0D26               ??_lcd_init 0004               ??_lcd_goto 0003  
             ??_lcd_puts 0005     end_of_initialization 0DEE                  fputc@fp 0003  
          __Lmediumconst 0000                  fputs@fp 000C        __end_of_vfpfcnvrt 08CC  
                postdec1 0FE5                  postdec2 0FDD                  postinc0 0FEE  
                postinc1 0FE6                  postinc2 0FDE         vfpfcnvrt@convarg 0031  
             ??_vfprintf 003D                _PORTBbits 0F81               lcd_write@c 0002  
            vfpfcnvrt@ap 002D              vfpfcnvrt@cp 0035              vfpfcnvrt@fp 0029  
    start_initialization 0DB6              __end_of_abs 0E38              __end_of_pad 0C0E  
            vfprintf@fmt 0039              __pdataBANK0 0080              __pbssCOMRAM 0054  
               ?___awdiv 0001                 ?___awmod 0001                _lcd_clear 0E72  
              _lcd_write 0E38              __smallconst 0600                 ?_sprintf 003F  
             ?_lcd_clear 0001                _vfpfcnvrt 07AA               ?_lcd_write 0001  
              lcd_puts@s 0003                copy_data0 0DCA                 __Hrparam 0000  
             vfprintf@ap 003B                 __Lrparam 0000               vfprintf@fp 0037  
             ?_vfpfcnvrt 0029               sprintf@fmt 0041                 _dtoa$725 0020  
               __ptext10 0A5A                 __ptext11 0996                 __ptext12 0C78  
               __ptext13 0C0E                 __ptext14 0E72                 __ptext15 0E9E  
               __ptext16 0E38                 _lcd_init 0C0E                 _lcd_goto 0E9E  
               _lcd_puts 0C78                 isa$xinst 0000                 _vfprintf 0CD8  
            ??_lcd_clear 0003              ??_lcd_write 0001                sprintf@ap 0045  
            ??_vfpfcnvrt 002F                 sprintf@f 0047                 sprintf@s 003F  
